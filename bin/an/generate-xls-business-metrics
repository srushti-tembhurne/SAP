#!/usr/local/bin/perl -w

use strict;
use FindBin;
use lib "$FindBin::Bin/../../lib";

use ariba::monitor::misc;
use ariba::Ops::OW::Component;
use ariba::Ops::Utils;
use ariba::rc::InstalledProduct;

my %reports = (
	'AN Invoice Details' => 'invoice',
	'AN PO Details'      => 'podetails',
	'AN Uptime Report'   => 'uptime',
);

sub main {
	my $to		= join(', ', @ARGV);

	my $baseDir     = "$FindBin::Bin/../../lib/ariba/Ops/OW/testhtml";
	my $autoDocroot = ariba::monitor::misc::autoGeneratedDocsDir() . '/metrics';

	# Call the OW stuff to generate the XML based Excel files.
	for my $template (values %reports) {

		my $ow = ariba::Ops::OW::Component->newFromHtmlFile("$baseDir/$template.html");

		open(XLS, ">$autoDocroot/$template.xls") or do {
			warn "Can't write to: [$autoDocroot/$template.xls] - $!";
			next;
		};

		$ow->displayToStream(\*XLS);

		close(XLS);
	}

	# Get the proper webserver to point these at.
	my $me = ariba::rc::InstalledProduct->new();

        my $cluster = $me->currentCluster();
        my $ws      = ($me->hostsForRoleInCluster("monserver", $cluster))[0];
        my $port    = $me->default("WebServerHTTPPort");

	my $baseUrl = "http://$ws:$port/mon/dynamic/metrics";

	# send a notification out to those who care.
	if ($to && $to =~ /@/) {

		my $from = 'nobody@ariba.com';
		my $body = join("\n\n", map { "$_ - $baseUrl/$reports{$_}.xls" } sort keys %reports);

		ariba::Ops::Utils::email(
			$to,
			"AN Excel Business Metrics for the month.",
			$body,
			undef,
			$from,
			$from
		);
	}
}

main();
