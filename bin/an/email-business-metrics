#!/usr/local/bin/perl -w
#
# $Id: //ariba/services/monitor/bin/an/email-business-metrics#6 $
#
# A script to email business metrics at the start of each month (for the
# previous month). It also archives the file that is mailed out.
#

use strict;
use FindBin;
use lib "$FindBin::Bin/../../lib";

use ariba::monitor::misc;
use ariba::Ops::Utils;
use ariba::rc::Utils;
use ariba::Ops::DateTime;
use ariba::rc::InstalledProduct;

sub main {
	my $reportType  = shift(@ARGV);
	my $to		= join(', ', @ARGV);

	my $autoDocroot = ariba::monitor::misc::autoGeneratedDocsDir();
	my $metricsDir = "$autoDocroot/metrics";

	# Get the proper webserver to point these at.
	my $me = ariba::rc::InstalledProduct->new();
	my $installDir = $me->installDir();

	my $recentOutages = "$installDir/bin/recent-outages";
	my $subject = "";

	my ($startOfPreviousMonth, $startOfThisMonth) = ariba::Ops::DateTime::computeStartAndEndDate(time(), 1);

	my $cmd = "";
	my $mailFile = "";

	if ($reportType eq "business") {
		$subject = "AN business-metrics for the month $startOfPreviousMonth $startOfThisMonth";
		$mailFile = "$metricsDir/an-business-metrics.$startOfThisMonth.txt";
		$cmd = "/bin/cp -p $metricsDir/an-business-metrics.txt $mailFile";
	} elsif ($reportType eq "internal-uptime-shared") {
		$subject = "Shared Service internal uptime metrics for the month $startOfPreviousMonth $startOfThisMonth";
		$mailFile = "$metricsDir/internal-uptime-shared-metrics.$startOfThisMonth.txt";
		$cmd = "$recentOutages -a -product-family shared -report > $mailFile";
	} elsif ($reportType eq "internal-uptime-aes") {
		$subject = "AES internal uptime metrics for the month $startOfPreviousMonth $startOfThisMonth";
		$mailFile = "$metricsDir/internal-uptime-aes-metrics.$startOfThisMonth.txt";
		$cmd = "$recentOutages -a -product aes -report > $mailFile";
	} elsif ($reportType eq "internal-uptime-anl") {
		$subject = "ANL internal uptime metrics for the month $startOfPreviousMonth $startOfThisMonth";
		$mailFile = "$metricsDir/internal-uptime-anl-metrics.$startOfThisMonth.txt";
		$cmd = "$recentOutages -a -product anl -report > $mailFile";
	} elsif ($reportType eq "internal-uptime-acm") {
		$subject = "ACM internal uptime metrics for the month $startOfPreviousMonth $startOfThisMonth";
		$mailFile = "$metricsDir/internal-uptime-acm-metrics.$startOfThisMonth.txt";
		$cmd = "$recentOutages -a -product acm -report > $mailFile";
	} elsif ($reportType eq "customer-uptime") {
		$subject = "AN customer uptime metrics for the month $startOfPreviousMonth $startOfThisMonth";
		$mailFile = "$metricsDir/customer-uptime-metrics.$startOfThisMonth.txt";
		$cmd = "$recentOutages -customerView -report > $mailFile";
	} else {
		print "Error: Unknown metrics to email [$reportType]\n";
		exit(1);
	}

	#
	# run the command and email the results if successful
	#
	if ($cmd && r($cmd)) {
		print "Error: failed to generate $reportType for emailing to $to\n";
		exit(1);
	}

	# send a notification out to those who care.
	if ($to && $to =~ /@/) {

                my $from = 'nobody@ariba.com';
                if($reportType eq "customer-uptime") {
                    my $body = "https://wiki.ariba.com:8443/display/ENGDPTS/Ariba+Availability+Report. \n";
                    $body .= "Please visit this wiki link in this message for Availability Report.";
                    ariba::Ops::Utils::email(
                       $to,
                       $subject,
                       $body,
                       undef,
                       $from,
                       $from
                   );
                } else {
		       ariba::Ops::Utils::emailFile(
		       $to,
	               $subject,
	               $mailFile,
		       undef,
		       $from,
	               $from
		);
	      }
      }
}

main();
