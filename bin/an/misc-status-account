#!/usr/local/bin/perl -w

# $Id: //ariba/services/monitor/bin/an/misc-status-account#0 $

use strict;
use FindBin;
use lib "$FindBin::Bin/../../../lib";

use ariba::monitor::QueryManager;
use ariba::rc::InstalledProduct;
use ariba::Ops::ProductAPIExtensions;

	my $debug = 0;

sub usage {
	my $error = shift;

	print <<USAGE;
Usage: $0 [-e|-p|-d|-h]

	-e    Enables sending of email for monitor query.
	-p    Enables sending of pages for monitor query.
	-d    Turns on debug mode.
	-h    Shows this help.

USAGE

	print "(error) $error\n" if ($error);

	exit();
}

sub main{
	my $sendEmail = 0;
	my $sendPage = 0;

	while(my $arg=shift(@ARGV)){
		if ($arg =~ /^-h/o) { usage(); 			next; }
		if($arg =~ /^-d/o){ $debug = 1; 		next; }
		if($arg =~ /^-e/o){ $sendEmail = 1; 	next; };
		if($arg =~ /^-p/o){ $sendPage = 1; 	next; };

		 usage("Invalid argument: $arg");
	}

	my $me = ariba::rc::InstalledProduct->new();
	my $an = ariba::rc::InstalledProduct->new("an", $me->service());

	my $queries = {};

	$queries->{"Catalog Tester Account Status"} = {
		info => "answer == 1",
		severity => "1",
		crit => "answer != 1",
		sql  => q`
				select count(1) as count
				from person
				where user_id = 'ariba-network-catalog-tester@ariba.com'
				and status = 'Enabled'
			`,
		description => "Check Catalog Tester account status.",
		correctiveActions => [
			Ops => "Escalate to Engineering",
			Engineering => "To evaluate why Catalog Tester Account is missing.",
		],
	};

	my $email = $me->default('notify.email');
    $queries->{influx_details} = {measurement => 'an_misc_status_account'};
	my $qm = ariba::monitor::QueryManager->newWithDetails(
		"misc-status", "an", $me->service, $me->customer(), $queries
	);

	$qm->setSQLConnectInfo(ariba::Ops::ProductAPIExtensions::connectInfoForOracleClient($an));
        ariba::Ops::ProductAPIExtensions::setCommunitiesSQLConnectInfoOnQueryManager($an, $qm);

	$qm->processQueries($debug, $email, $sendEmail, $sendPage);

}

main();

__END__
