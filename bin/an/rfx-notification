#!/usr/local/bin/perl -w
#
# $Id: //ariba/services/monitor/bin/an/rfx-notification#8 $
#

use strict;

use FindBin;
use lib "$FindBin::Bin/../../lib";

use ariba::monitor::QueryManager;
use ariba::rc::InstalledProduct;
use ariba::Ops::ProductAPIExtensions;
use ariba::Ops::DBConnection; 
use ariba::Ops::OracleClient;

sub main {
	my $debug = 0;
	my $sendEmail = 0;
	my $sendPage = 0;
	my $queries = {};
	my $runDaily = 0;

	while (my $arg = shift(@ARGV)) {
		if ($arg =~ m/^-d/o) { $debug = 1; }
		if ($arg =~ m/^-e/o) { $sendEmail = 1; }
		if ($arg =~ m/^-p/o) { $sendPage = 1; }
	}

	my $me = ariba::rc::InstalledProduct->new();
	my $service = $me->service();
	my $an = ariba::rc::InstalledProduct->new('an', $service);

	my @communityIds = ariba::Ops::ProductAPIExtensions::communityIdsForProductOfType($an,"supplier");
	my $communitiesList = join(", ", @communityIds);

	my $dbc = ariba::Ops::DBConnection->connectionsForProductOfDBTypeAndSchemaId ( $an, ariba::Ops::DBConnection->typeMainSupplier() );

	exit unless $dbc;
	my $oc = ariba::Ops::OracleClient->newFromDBConnection($dbc);

	my $sql;

	my $email = $me->default('notify.email');

	my $q;
    	$q->{influx_details} = { measurement => 'rfx_notification'};

	$q->{'RfxPendingNotification in the queue'} = {
		info => 1,
		uiHint => 'notification',
		sql => 'select count(1) as pending_notification from rfx_pending_notification',
		recordMaxResults => 20000,
		recordDataType => "gauge",
	};

	$q->{'Stale Event Notification'} = {
		info => 1,
		warn => "answer > 5",
		crit => "answer > 10",
		uiHint => 'notification',
		sql => 'SELECT COUNT(*) as stale_event_notification FROM rfx_pending_notification n JOIN rfx_event event ON event.id = n.event JOIN org o ON o.id = event.sourcing_org WHERE (o.type <> 110) AND n.ACTION_DATE < SYSDATE - 2 AND n.ACTION is not null AND event.is_test = 0',
		severity => 1,
		ticketOnWarnOpenAfterMinutes => 20,
		recordMaxResults => 20000,
		recordDataType => "gauge",
	};

	my $qm = ariba::monitor::QueryManager->newWithDetails('rfx', 'an', $service, undef, $q);
	$qm->setSQLConnectInfo(ariba::Ops::ProductAPIExtensions::connectInfoForOracleClient($an));
	$qm->processQueries($debug, $email, $sendEmail, $sendPage);

}

main();

