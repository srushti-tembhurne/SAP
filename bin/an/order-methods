#!/usr/local/bin/perl
#
# $Id: //ariba/services/monitor/bin/an/order-methods#13 $

use strict;

use FindBin;
use lib "$FindBin::Bin/../../../lib";

use ariba::monitor::QueryManager;
use ariba::rc::InstalledProduct;
use ariba::Ops::ProductAPIExtensions;

my %queries;

sub main{
	my $debug = 0;
	my $sendEmail = 0;
	my $sendPage = 0;

	while(my $arg = shift(@ARGV) ){
		if($arg =~ /^-d/o){ $debug = 1; }
		if($arg =~ /^-e/o){ $sendEmail = 1; };
		if($arg =~ /^-p/o){ $sendPage = 1; };
	}

	my $me = ariba::rc::InstalledProduct->new();
	my $an = ariba::rc::InstalledProduct->new("an", $me->service());

	my $email = $me->default('notify.email');

	my @communityIds = ariba::Ops::ProductAPIExtensions::communityIdsForProduct($an);
	my $communitiesList = join(", ", @communityIds);

	#destination2 : order routing method (edi cxml email fax html Emergis.EDI IBM.EDI)
	#destination1 : service provider
	#destination0 : host or supplier id

	%queries=(
		"paused order routing methods" =>
		{
		  noRowCount => 1,
		  runForCommunities => $communitiesList,
		  info => "numrows <= 0",
		  crit => "numrows > 0",
		  sql => q`
		      select destination2 from stopped_doc_dest
		    `,
		},

		"unpaused order routing methods" =>
		{	
		  noRowCount => 1,
		  runForCommunities => $communitiesList,
		  info => "numrows >= 0",
		  crit => "numrows < 0",
		  sql => q`
			select d from
				(select 'edi' d from dual union
				 select 'cxml' d from dual union
				 select 'email' d from dual union
				 select 'fax' d from dual union
				 select 'html' d from dual union
				 select 'Emergis.EDI' d from dual union
				 select 'IBM.EDI' d from dual 
				) a
			where not exists 
				(select * from stopped_doc_dest where destination2 = a.d)
		    `,
		},
	);

	my $q = ariba::monitor::QueryManager->newWithDetails("order-methods", "an", $me->service(), $me->customer(), \%queries);

	ariba::Ops::ProductAPIExtensions::setCommunitiesSQLConnectInfoOnQueryManager($an, $q);

	$q->processQueries($debug, $email, $sendEmail, $sendPage);
}

main();
