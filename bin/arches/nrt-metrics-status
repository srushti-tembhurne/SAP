#!/usr/local/bin/perl -w
# $Id: //ariba/services/monitor/bin/arches/nrt-metrics-status#6 $


## Creating NRT Metrics Moniotring for Arches 
## HOA-45829
## Developed By: Ankit Kotak

use strict;
use FindBin;
use XML::Simple;
use Data::Dumper;
use lib "$FindBin::Bin/../../lib";

use ariba::monitor::Url;
use ariba::monitor::Query;
use ariba::monitor::QueryManager;
use ariba::rc::InstalledProduct;
use ariba::Ops::SplunkLogger;

my $debug = 0;

my %preetyName = (
    "unconfirmedJobMetric" => "Unconfirmed Job Metric", 
    "requestProcessingMetric" => "Request Processing Metric",         
    "luceneDocCount" => "Lucene Doc Count",
    "percent90Time"  => "90th Percentile Time",
    "unconfirmedJobCount" => "Unconfirmed Job Count",
    "averageTime" => "Average Time",
    "count" => "Count",
);


my $message = "Rolled up value of the corresponding metric across the zone.";

my %description =  ("luceneDocCount" => "The number of Lucene Documents currently stored in memory by NRTManager on the corresponding Search Core.", 
                    "unconfirmedJobCount" => "The number of NRTUpdateJobs currently stored in memory by NRTManager on the corresponding Search Core. One NRTUpdateJob has one or more Lucene Documents.",
                    "averageTime" => "The average of the time taken by NRTManager to process requests ( parse and commit). Metric valid for requests processed in past 5 mins by NRTManager on the corresponding Search Core.", 
                    "count" => "The number of requests processed by NRTManager. Metric valid for requests processed in past 5 mins by NRTManager on the corresponding Search Core.",
                    "percent90Time" => "The 90th percentile of the time taken by NRTManager to process requests (parse and commit). Metric valid for requests processed in past 5 mins by NRTManager on the corresponding Search Core",
                    "totalCount" => "$message This is the count of requests processed by NRTManagers for the zone in the last 5 mins.", 
                    "maxofPercent90Time" => "$message There is no good way to roll-up a 90th percentile. Therefore, this rolled-up value simply picks the max 90th percentile from amongst all the NRTManagers across the zone.",
                    "countTimesAverage" => "$message The average is for all requests processed by NRTManagers for the zone in the last 5 mins.",
                    "totalunconfirmedJobCount" => "$message The total number of NRTUpdateJobs stored in memory by all NRTManagers across the zone.",
                    "totalluceneDocCount" => "$message The total number of Lucene Documents stored by all NRTManagers in memory across the zone.",
);

my %rollUpType = ("totalCount" => 'Request Processing Metric - Count', 
                  "maxofPercent90Time" => 'Request Processing Metric - Max of Percentile 90th Time', 
                  "countTimesAverage" => 'Request Processing Metric - Average Time', 
                  "totalunconfirmedJobCount" => 'Unconfimed Job Metric - Unconfirmed Job Count',
                  "totalluceneDocCount" => 'Unconfimed Job Metric - Lucene Doc Count');

my %formatItem = ("totalCount" => '', "maxofPercent90Time" => "%d ms", "countTimesAverage" => "%d ms", "totalunconfirmedJobCount" => '', "totalluceneDocCount" => ''); 

sub usage {
    my $error = shift; 

    print <<USAGE;
Usage: $0 [-daily] [-e|-p|-d|-h] [-prod prodname]

    -daily    Run daily type of queries
    -e        Enables sending of email for monitor query.
    -p        Enables sending of pages for monitor query.
    -d        Turns on debug mode. 
    -h        Shows this help.
    -prod     arches product name.

USAGE

    print "(error) $error\n" if ($error);

    exit();
}

sub debug {
    print "(debug) @_\n" if ($debug);
}

sub main {
    my $sendEmail = 0;
    my $sendPage = 0;
    my $runDailyQueries = 0;
    my $prodname = "arches";

    while (my $arg = shift) {
        if ($arg =~ /^-h$/o) { usage();         next; }
        if ($arg =~ /^-d$/o) { $debug++;        next; }
        if ($arg =~ /^-e$/o) { $sendEmail = 1;  next; }
        if ($arg =~ /^-p$/o) { $sendPage = 1;   next; }
        if ($arg =~ /^-daily$/o) { $runDailyQueries = 1;   next; }
        if ($arg =~ /^-prod$/o) { $prodname = shift;   next; }

        usage("Invalid argument: $arg");
    }

    usage("arches product name not specified") unless $prodname;

    my $me = ariba::rc::InstalledProduct->new();
    exit unless (ariba::rc::InstalledProduct->isInstalled($prodname, $me->service()));
    my $arches = ariba::rc::InstalledProduct->new($prodname, $me->service());
    my $jobsStatusCollected = 0;

    CLUSTER: 
    foreach my $cluster ( $arches->allClusters() ) {

        my %queries;
        my %influx_data = (measurement => "arches_ntr_metrics", tags => {product => $prodname, service =>  $me->service(), cluster => $cluster});
        my $xml;
        my @indexMgrApps = grep { $_->appName() eq 'IndexMgr' } $arches->appInstancesInCluster($cluster); 
        exit unless (@indexMgrApps);

        INSTANCE:
        for my $app (@indexMgrApps) {
            my $instanceName = $app->instanceName();
            my $statusUrl = $app->nrtMetricsMonitoringURL();
            debug("Checking index manager url: $statusUrl");
        
            my $url = ariba::monitor::Url->new($statusUrl);
            my $response = eval{ $url->request(30); }; # This method can die() with empty message.  The implication of this is staggering.
            my $xs  = XML::Simple->new();
     
            $xml = eval { XMLin( $response, KeyAttr => { nrtMetric => 'shard'} ) };
            
            my $error = $url->error() || $@;
            debug("Error: $error") if ($error);
            
            next INSTANCE if $error;
            last; 
        }
            my $rollUpData = { } ; 
            while (my ($xml, $zoneSummary) = each %{ $xml } ) {
                my $cntAvgTime;
                foreach my $shard ( keys %{$zoneSummary} ) {
                    my $zone = $zoneSummary->{$shard}->{'zone'}; 
                    my $shardInfo = $zoneSummary->{$shard};                   
                    my $count = $zoneSummary->{$shard}->{'requestProcessingMetric'}->{'count'};
                    $rollUpData->{$zone}->{'totalCount'} += $count ;

                    my $avgTime = $zoneSummary->{$shard}->{'requestProcessingMetric'}->{'averageTime'};
                    my $cntTimeAvg = $count * $avgTime;
                    $rollUpData->{$zone}->{'countTimesAverage'} += $cntTimeAvg;

                    my $percent90Time = $zoneSummary->{$shard}->{'requestProcessingMetric'}->{'percent90Time'};
                    $rollUpData->{$zone}->{'maxofPercent90Time'} = 0 , unless (defined $rollUpData->{$zone}->{'maxofPercent90Time'});

                    if ( $percent90Time > $rollUpData->{$zone}->{'maxofPercent90Time'}){
                        $rollUpData->{$zone}->{'maxofPercent90Time'} = $percent90Time;
                    }

                    $rollUpData->{$zone}->{'totalluceneDocCount'} += $zoneSummary->{$shard}->{'unconfirmedJobMetric'}->{'luceneDocCount'};
                    $rollUpData->{$zone}->{'totalunconfirmedJobCount'} += $zoneSummary->{$shard}->{'unconfirmedJobMetric'}->{'unconfirmedJobCount'};
                    

                    foreach my $info ( keys %{$shardInfo} ) {
                        next if ($info =~ /zone/i);
                        my $pinfo = $preetyName{$info} || $info;
                        my $value = $shardInfo->{$info};
                        my $warn = 0;
                        my $crit = 0;

                        foreach my $in ( keys %{$value} ) {
                            my $pin = $preetyName{$in} || $in;
                            my $format;
                            $format = "%d ms\n", if($in =~ /time/i); 
                             
                            $queries{"$zone - $shard - $pinfo - $pin"} = {
                                recordMaxResults => 103680, ## Every 5 min;  for 1 Year = 5 * 12 * 24 * 365
                                warn           =>  $warn,
                                crit           =>  $crit,
                                format         =>  $format,
                                perl           =>  sub { return $value->{$in} },
                                description    =>  $description{$in},
                                uiHint         =>  "$zone",
                                inf_field      => "$pin",
                                inf_tags       => qq(zone="$zone",shard="$shard",type="$pinfo"),
                            };
                            $influx_data{tags}->{zone} = $zone;
                            $influx_data{tags}->{shard} = $shard;
                            my $metric_name = $info . "-$in";
                            set_statsd_data(\%influx_data,$metric_name,$value->{$in});
                        }
                    }
                    eval {
                        my $statsd_line = ariba::Ops::Utils::generateStatsDLine(\%influx_data);
                        ariba::Ops::Utils::sendToStatsD($statsd_line) if ( $statsd_line);
                    };
                    delete $influx_data{data};
                }
                
            }

            my $processRollUpInfo = processRollUpData($rollUpData, \%queries, \%influx_data);
            print "Finally Processed Data ", Dumper($processRollUpInfo), "\n", if $debug;
            print "Total Number of Queries for $cluster ", scalar keys %queries, "\n", if $debug; 
            
            next CLUSTER unless (scalar keys %queries > 0 ) ;
            my $email = $me->default('notify.email');
            my $qm = ariba::monitor::QueryManager->newWithDetails('NRT-metrics', $arches->name(), $arches->service(), undef, $cluster, \%queries);
            $qm->processQueriesUsingServer($debug, $email, $sendEmail, $sendPage);
        }
}

sub set_statsd_data
{
    my $data =shift;
    my $field_name = shift;
    my $fvalue = shift;
    if ($fvalue =~ /\D/)
    {
        my $log_name = $field_name . "_splunk_log_id";
        my $splunk_logger = ariba::Ops::SplunkLogger->new("data->{measurement}");
        my $log_id = $splunk_logger->log_msg({ message => "$fvalue" });
        $data->{data}->{$log_name} = $log_id;
    }
    else
    {
        $data->{data}->{$field_name} = $fvalue;
    }
}

sub processRollUpData {
    my $rollUpData = shift;
    my $queries = shift;
    my $influx_data = shift;
    my $warn = 0; 
    my $crit = 0;          

    $influx_data->{tags}->{shard} = 'RolledUp';
    print "IN ROLLUPDATA ", Dumper($rollUpData), "\n", if $debug;           
    my $processrRollUpData = {}; 
    while (my ($zone, $rollUpInfo) = each %{$rollUpData}){
        $influx_data->{tags}->{zone} = $zone;
        foreach my $item (keys %$rollUpInfo) {
            my $totalcnt = $rollUpInfo->{'totalCount'};
            my $cntTimesAvg = $rollUpInfo->{$item};
            my  $zn = uc $zone;
            $processrRollUpData->{$zone}->{$rollUpType{$item}} = $rollUpInfo->{$item};          

            if ( ($item =~ /countTimesAverage/i)  && ($totalcnt > 0) ) { 
                my $avgTime = $cntTimesAvg / $totalcnt;        
                $processrRollUpData->{$zone}->{$rollUpType{$item}} = $avgTime;
            }
            print "ITEM $item ", $rollUpInfo->{$item}, "\n", if $debug;
            $queries->{ "$zn - $rollUpType{$item}" } = {
                recordMaxResults => 103680, ## Every 5 min;  for 1 Year = 5 * 12 * 24 * 365
                warn           =>  $warn,
                crit           =>  $crit,
                format         =>  $formatItem{$item},
                perl           =>  sub { return $processrRollUpData->{$zone}->{$rollUpType{$item}} },
                description    =>  $description{$item},
                uiHint         =>  $zone,
            };         
            $influx_data->{data}->{$item} = $processrRollUpData->{$zone}->{$rollUpType{$item}} ;
        }
        eval {
            my $statsd_line = ariba::Ops::Utils::generateStatsDLine($influx_data);
            ariba::Ops::Utils::sendToStatsD($statsd_line) if ( $statsd_line);
        };
        delete $influx_data->{data};
    }

      
    return $processrRollUpData;        
}


main(@ARGV);

__END__
