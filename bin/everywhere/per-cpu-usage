#!/usr/local/bin/perl -w

use strict;
use lib qw(/usr/local/ariba/lib);

use FindBin;
use lib "$FindBin::Bin/../../lib";
use lib "$FindBin::Bin/../../lib/perl";

use ariba::rc::InstalledProduct;
use ariba::monitor::QueryManager;
use ariba::monitor::StatusPage;
use ariba::Ops::PageUtils;
use ariba::Ops::Machine;
use ariba::Ops::CFEngine::MonitoringGlueUtils;
use ariba::Ops::Constants;

my $debug = 0;


sub usage {
    my $error = shift;
    print "Error: $error\n" if $error;
    print "Usage: $0\n";
    print "       [-d] Debug\n";
    print "       [-e] Send email\n";
    print "       [-p] Send page\n";

    exit(1);
}

sub main {
    my $sendEmail = 0;
    my $sendPage = 0;
    my(@stats, %queries);
    while(my $arg = shift @ARGV) {
        if($arg eq "-d") { $debug++; next; }
        if($arg eq "-e") { $sendEmail = 1; next; }
        if($arg eq "-p") { $sendPage = 1; next; }
        usage("Unknown arg: $arg");
    }

    my $machine = ariba::Ops::Machine->new();
    my $hostname = $machine->hostname();
    my $datacenter = $machine->datacenter();
    my $uiHint;
    my $timeout = 250;

    if($machine->provides("db")) {
        $uiHint = "Database/$hostname";
    } else {
        $uiHint = "Other/$hostname";
    }
    exit(0) unless $machine->os() eq "redhat";
    my $monserver = ariba::Ops::CFEngine::MonitoringGlueUtils::monitorServer();
    
    my $email = ariba::Ops::Constants->operationsEmailNotificationAddress();
    my $tab = ariba::monitor::StatusPage::fakeProductNameForDatacenter($datacenter);

    open(STAT, "/proc/stat") or die "Could not open /proc/stat\n";

    while(my $line = <STAT>) {
        next if $line !~ m/^cpu(\d+)/;
        my $cpuid = $1;
        my($dummy, $user, $nice, $system, $idle, $iowait, $irq, $softirq) = split(/\s+/, $line);
        my $total = $user + $nice + $system + $idle + $iowait + $irq + $softirq; #with idle
        my $usage = $user + $nice + $system + $iowait + $irq + $softirq; #without idle
        push(@stats, [$cpuid, $total, $user, $nice, $system, $idle, $iowait, $irq, $softirq, $usage]);
    }

    foreach my $cpu (@stats) {
        my $cpuid = $cpu->[0];
        $queries{"$hostname CPU $cpuid Total Counter"} = {
            'info' => 1,
            'uiHint' => "ignore",
            'perl' => "return $cpu->[1]",
        };

        $queries{"$hostname CPU $cpuid Usage Counter"} = {
            'info' => 1,
            'uiHint' => "ignore",
            'perl' => "return $cpu->[9]",
        };
    }

    my $qm = ariba::monitor::QueryManager->newWithUnknownService("per-cpu", \%queries);
    $qm->processQueriesUnknownService($debug, $email, $sendEmail, $sendPage);

    %queries = ();

    foreach my $cpu (@stats) {
        my $cpuid = $cpu->[0];
        my $qname = "$hostname CPU $cpuid Total Counter";
        my $instance = ariba::monitor::Query->generateInstanceName($qname, $tab);
        my $query = ariba::monitor::Query->new($instance);
        next unless defined($query->previousResults());
        my $total = $query->results() - $query->previousResults();
        my $usage;

        $qname = "$hostname CPU $cpuid Usage Counter";
        $instance = ariba::monitor::Query->generateInstanceName($qname, $tab);
        $query = ariba::monitor::Query->new($instance);
        $usage = $query->results() - $query->previousResults();
         
        $queries{"$hostname CPU $cpuid Usage"} = {
            'recordMaxResults' => 110000,
            'recordDataType' => 'gauge',
            'format' => '%.2f%%',
            'info' => 1,
            'uiHint' => "$uiHint",
            'perl' => "return ($usage / $total * 100)",
        };
    }


    $qm = ariba::monitor::QueryManager->newWithUnknownService("per-cpu-from-$hostname", \%queries);
    $qm->setUiManager('per-cpu');
    eval { $qm->processQueriesUnknownService($debug, $email, $sendEmail, $sendPage); };
    if ( $@ ) {
        print $@;
        # do something else as needed
    }
}

main();
