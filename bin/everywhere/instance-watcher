#!/usr/local/bin/perl -w

# $Id: //ariba/services/monitor/bin/everywhere/instance-watcher#52 $
#
# Get a list of Products for this machine, walk the process table
# periodically, and make memory size information available to client.

use strict;
use lib qw(/usr/local/ariba/lib);

use FindBin;
use lib "$FindBin::Bin/../../lib";
use lib "$FindBin::Bin/../../lib/perl";

use ariba::rc::InstalledProduct;
use ariba::rc::Product;
use ariba::rc::Utils;
use ariba::monitor::QueryManager;
use ariba::Ops::ProcessTable;
use ariba::monitor::OutageSchedule;
use ariba::Ops::NetworkUtils;
use ariba::Ops::Machine;
use ariba::Ops::Utils;

use Linux::Smaps;

my $debug = 0;

my $hostname = ariba::Ops::NetworkUtils::hostname();

sub usage {
    print "Error : $_[0]\n" if ($_[0]);
    print "Usage: $0 <Product name> <Service>\n";
    print "          [-customer <customer>]\n";
    print "          [-d] Debug\n";
    print "          [-e] Send email\n";
    print "          [-p] Send page\n";

    exit(1);
}


sub _appPidFromRowInPidFile {
    my $row = shift;
    my $pidFile = shift;
    my $pid;

    if (open(my $fh, "< $pidFile")) {
        my @pids = <$fh>;
        close($fh);

        chomp($pid = $pids[$row - 1]) if (scalar(@pids) >= $row);
    }

    return $pid;
}

sub appPidFromKrPidFile {
    my $krPidFile = shift;

    return _appPidFromRowInPidFile(2, $krPidFile);
}

sub appPidFromPidFile {
    my $krPidFile = shift;

    return _appPidFromRowInPidFile(1, $krPidFile);
}


sub main {
    my $sendEmail   = 1;
    my $sendPage    = 0;
    my $productName = undef;
    my $service     = undef;
    my $customer    = undef;
    my @unrecognizedArgs;
    my @pidList;

    while (my $arg = shift(@ARGV)) {
        if( $arg =~ /^-e$/o ){ $sendEmail = 1; next; };
        if( $arg =~ /^-p$/o ){ $sendPage = 1; next;};
        if( $arg =~ /^-d$/o ){ $debug = 1; next;};
        if( $arg =~ /^-customer$/o ) { $customer = shift(@ARGV); next;};
        if( $arg !~ /^-/o  ){
            if ($productName) {
                if ($service) {
                    push(@unrecognizedArgs, $arg);
                } else {
                    $service = $arg;
                }
            } else {
                $productName = $arg;
            }
            next;
        }

        push(@unrecognizedArgs, $arg);
    }

    usage("Unrecognized Argument(s) : " . join(', ', @unrecognizedArgs) ) if (scalar(@unrecognizedArgs));
    usage("Need a product") unless ($productName);
    usage("Need a service") unless ($service);

    my @products = ariba::rc::InstalledProduct->installedProductsList($service, $productName, $customer);
    for my $product (@products) {

        my $deployment   = $product->buildName();
        my $release_name = $product->releaseName() . " ";  ### Convert the data to a string i.e 42.0 will become "42.0 "

        my %pidToNodeMap = ();
        my @pidList = ();

        my $customer = $product->customer();

        my $outage;
        if ($productName eq "s4") {
            $outage = ariba::monitor::OutageSchedule->new('daily 22:00-23:20');
        }
        if ($productName eq "buyer") {
            $outage = ariba::monitor::OutageSchedule->new('daily 23:00-23:59', 'daily 00:00-00:20');
        }

        my %queries  = ();
        my %computingQueries  = ();

        my $kpDir = "/tmp/$service/$productName";
        $kpDir = "$kpDir/$customer" if ($customer);
        unless( -d $kpDir ) {
            $kpDir = "/tmp/$productName";
            $kpDir = "$kpDir/$customer" if ($customer);
        }

        # Get the keepRunning filenames, exclude non-running files.
        # exit if /tmp/$name doesn't exist, that means the apps aren't running
        unless ( -d $kpDir ) {
            next;
        }

        # grab the keepRunning pid files
        opendir(TMP, $kpDir) || warn "instance-watcher could not open dir [$kpDir]: $!";
        my @filelist = grep { /\w+\.pid$/ } readdir(TMP);
        closedir(TMP);

        # Walk the process table.
        my $processTable = ariba::Ops::ProcessTable->new();

        for my $instance ($product->appInstances()){

            my $name = $instance->instanceName();
            my $appName = $instance->appName();
            my $pid;
            my %influx_data = ();

            # skip if we didn't match any file
            if ($product->default('Ops.VeritasControlEnabled') &&
                $product->default('Ops.VeritasControlEnabled') eq 'true' &&
                $product->default("Ops.VeritasControlledNodes.$appName.Group")) {
                my $serverRole = $instance->serverRoles();
                my ($file) = grep { /$serverRole/ } @filelist;
                next unless $file;

                $pid = appPidFromPidFile("$kpDir/$file");
            } else {
                my ($file) = grep { /$name/ } @filelist;
                next unless $file;

                $pid = appPidFromKrPidFile("$kpDir/$file");
            }

            next unless ($pid && $processTable->processWithPIDExists($pid));

            # fill in
            my $procData = $processTable->dataForProcessID($pid);

            # maxheap
            my $maxMemory = int($instance->maxInstanceMemory() / 1024);

            my $community = $instance->community();
            my $raw_comm = ( $community ) ? $community : "Default Community";

            if ($community) {
                $community = "community $community";
            } else {
                $community = "default community";
            }

            my $uiHint = "$community/" . $instance->appName();
            $influx_data{'measurement'} = 'instance_watcher';
            $influx_data{'tags'} = { product => $productName, service => $product->service(),
                                     community => "$raw_comm",appname => "$appName", instance => "$name",
                                     deployment => "$deployment", release_name => "$release_name" };

            if (defined $procData->{'privateMemSize'}) {

                my $warn = $maxMemory;
                my $crit = $maxMemory * 1.20;

                $queries{"$name RSS mem size in KBytes"} = {
                    'recordMaxResults' => 20000,
                    'recordDataType' => 'gauge',
                    'recordOnError' => 1,
                    'uiHint' => $uiHint,
                    'info' => 'answer > -1',
                    'warn' => "answer >= $crit",
                    'perl' => "return $procData->{'privateMemSize'}",
                };
                $influx_data{'data'}->{'rss_mem_size'} = $procData->{'privateMemSize'} || 0;
                $influx_data{'data'}->{'maxmemory'} = $maxMemory;

                if( -r "/proc/$pid/smaps") {
                    my $smap = Linux::Smaps->new($pid);
                    my $privateMemory = $smap->private_clean + $smap->private_dirty;
                    my $sharedMemory = $smap->shared_clean + $smap->shared_dirty;

                    $queries{"$name private mem size in KBytes"} = {
                        'recordMaxResults' => 20000,
                        'recordDataType' => 'gauge',
                        'recordOnError' => 1,
                        'uiHint' => $uiHint,
                        'info' => 'answer > -1',
                        'warn' => "answer >= $warn",
                        'perl' => "return $privateMemory",
                    };
                    $influx_data{'data'}->{'private_mem_size'} = $privateMemory || 0;

                    $queries{"$name shared mem size in KBytes"} = {
                        'recordMaxResults' => 20000,
                        'recordDataType' => 'gauge',
                        'recordOnError' => 1,
                        'uiHint' => $uiHint,
                        'info' => 'answer > -1',
                        'perl' => "return $sharedMemory",
                    };
                    $influx_data{'data'}->{'shared_mem_size'} = $sharedMemory || 0;
                }
            }
            if ($procData->{'time'}) {

                my $samples   = 4;
                my $warn      = 25;
                my $crit      = 40;
                my $queryName = "$name CPU time used";

                # misbehaving
                if ($name =~ /PerfTaskDispatcher/i) {
                    $samples = 8;
                    $warn    = 50;
                    $crit    = 60;
                }

                # Flume uses a lot of cpu as it tails thousands of files
                if ($name =~ /^Flume-/) {
                    $warn = 40;
                    $crit = 70;
                }

                $queries{$queryName} = {
                    'recordMaxResults' => 20000,
                    'recordDataType' => 'counter',
                    'perl' => "return $procData->{'time'} / getCpuCount() / 10000.0",
                    'uiHint' => "ignore",
                    'info' => 'answer > -1',
                    'recordDataUnits' => "per sec",
                    'recordOnError' => 1,
                    'outageSchedule' => $outage,
                };
                $influx_data{'data'}->{'cpu_time'} = ($procData->{'time'} / getCpuCount() / 10000.0) || 0;
                $influx_data{'data'}->{'warn_thresholdpct'} = $warn;
                $influx_data{'data'}->{'crit_thresholdpct'} = $crit;

                my $cdbName = ariba::monitor::Query->generateInstanceName($queryName, $product->name(), $product->customer(),
                                  $product->currentCluster());

                $computingQueries{"$name percent CPU usage "} = {
                    'uiHint' => $uiHint,
                    'info' => 'answer > -1',
                    'crit' => "answer >= $crit",
                    'warn' => "answer >= $warn",
                    'extractRecorded'=> "average($cdbName, +3)",
                    'format' => "%.2f%%",
                    'outageSchedule' => $outage,
                };
                $pidToNodeMap{ $name } = $pid;
            }

            eval {
                my $statsd_line = ariba::Ops::Utils::generateStatsDLine(\%influx_data);
                ariba::Ops::Utils::sendToStatsD($statsd_line) if ( $statsd_line);
            };
        }

        next unless(keys(%queries));

        my $email = $product->default('ops.notify.email') || $product->default('notify');
        my $monserver = ($product->hostsForRoleInCluster('monitor', $product->currentCluster()))[0];

        my $q = ariba::monitor::QueryManager->newWithDetails("http-urls-status-from-$hostname", $productName, $product->service(), $product->customer(), $product->currentCluster(), \%queries);
        $q->setUiManager('http-urls-status');
        $q->processQueriesUsingServer($debug, $email, $sendEmail, $sendPage, $monserver);

        my $computingQM = ariba::monitor::QueryManager->newWithDetails("http-urls-status-from-$hostname", $productName, $product->service(), $product->customer(), $product->currentCluster(), \%computingQueries);
        $computingQM->setUiManager('http-urls-status');
        $computingQM->processQueriesUsingServer($debug, $email, $sendEmail, $sendPage, $monserver);

        my  @queryObjList = $computingQM->queries();

        foreach  my $tmpQueryObj ( @queryObjList ) {

            my $status = $tmpQueryObj->status();
            if ( $status =~ /crit/i  )  {

                    my $nodeName = ((split (" ", $tmpQueryObj->queryName() ))[0]);
                    my $pid = $pidToNodeMap{ $nodeName };
                    push ( @pidList,$pid ) ;

            }
        }

        if ( @pidList ) {

            takeThreadDump( \@pidList );

        }
    }
}


sub getCpuCount() {
    my $me = ariba::Ops::Machine->new($hostname);
    return $me->cpuCount() || 1;
}

sub takeThreadDump() {

    my $pidListRef = shift;
    my $signal = 3;

    for ( my $tmpItr = 1 ; $tmpItr <= 3; $tmpItr++ ) {

        foreach my $tmpPid ( @$pidListRef ) {

            ariba::Ops::ProcessTable->sendSignal( $tmpPid, $signal );

        }

        sleep(30);
    }
}


main();

__END__

