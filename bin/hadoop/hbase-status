#!/usr/local/bin/perl -w 

use strict;
use FindBin; 
use lib "$FindBin::Bin/../../lib";

use Date::Parse;
use POSIX qw(strftime);

use ariba::rc::Globals;
use ariba::rc::InstalledProduct;
use ariba::rc::Utils;
use ariba::Ops::Machine;
use ariba::Ops::DateTime;
use ariba::Ops::Startup::Hadoop;
use ariba::Ops::HadoopConfig;
use ariba::Ops::NetworkUtils;
use ariba::util::Misc;
use ariba::monitor::QueryManager;
use ariba::monitor::Query;
use ariba::Ops::Utils;
use dmail::LockLib;

our $quiet = 1; # Suppresses prints in ariba::Ops::Startup::Common.pm
my $debug = 0;
my $lockfile = "/tmp/.hbase-status";


sub usage {
    my $error = shift; 

    print <<USAGE;
Usage: $0 [-hbck] [-e|-p|-d|-h]
Sends hbase health information to monitoring

    -hbck     Run 'hbase hbck' monitoring
    -e        Enables sending of email for monitor query.
    -p        Enables sending of pages for monitor query.
    -d        Turns on debug mode. 
    -h        Shows this help.

USAGE

    print "(error) $error\n" if ($error);

    exit();
}

sub debug {
    my $msg = shift; 

    print "(debug) $msg\n" if ($debug);
}

sub main {
    my $sendEmail = 0;
    my $sendPage = 0;
    my $runHbck;

    while (my $arg = shift) {
        if ($arg =~ /^-h$/o) { usage();             next; }
        if ($arg =~ /^-d$/o) { $debug++;            next; }
        if ($arg =~ /^-e$/o) { $sendEmail = 1;      next; }
        if ($arg =~ /^-p$/o) { $sendPage = 1;       next; }
        if ($arg =~ /^-hbck$/o) { $runHbck = 1;     next; }

        usage("Invalid argument: $arg");
    }

    my $me = ariba::rc::InstalledProduct->new();
    exit unless (ariba::rc::InstalledProduct->isInstalled('hadoop', $me->service()));
    my $hadoop = ariba::rc::InstalledProduct->new('hadoop', $me->service());
    my $cluster = $hadoop->currentCluster();

    my ($virtualHost) = $hadoop->rolesManager()->virtualHostsForRoleInCluster('hadoop-name', $cluster);
    if ($virtualHost) {
        my $activeHost = $hadoop->activeHostForVirtualHostInCluster($virtualHost, $cluster);
        my $host = ariba::Ops::NetworkUtils::hostname();
        debug("Current Host: $host / Active Host: $activeHost / Virtual Host: $virtualHost");   
        if ($host ne $activeHost) {
            debug("Exiting as current host is not the active host");
            exit(0);
        }
    }

    dmail::LockLib::forceQuiet();
    unless(dmail::LockLib::requestlock($lockfile, 5)) {
        die "$0 can't grab lock on [$lockfile]";
    }

    my %queries;

    if ($runHbck) {
        my ($output, $regionSplits, $status)  = runHbck($hadoop); 
        my $result = "Strange, no output from hbck?";
        $result = $status if $status;
        my $crit;

        # if status is 'OK', only display 'OK' in monitoring
        # if status is 'INCONSISTENT', display the full output w/stacktrace, details
        if ($status =~ /INCONSISTENT/) {
            $result = $output;
            $crit = 1;
        }

        $queries{'Hbase database check'} = {
            crit                => $crit,
            perl                => sub { return $result },
            noRowCount          => 1,
            description         => qq`Runs 'hbase hbck' and shows the output. hbck is a utilty that comes with
                Hbase that checks for any problems with the database. At the end of the commands output it 
                prints OK or INCONSISTENT. `,
            correctiveActions   => [
                Ops => 'Correct the problem based on the reported error from fsck. If your cluster reports ' . 
                    'inconsistencies, pass -details to see more detail emitted. If inconsistencies, run hbck ' . 
                    'a few times because the inconsistency may be transient (e.g. cluster is starting up or a ' .
                    'region is splitting). Passing -fix may correct the inconsistency (This latter is an ' . 
                    'experimental feature). Escalate to Tools/Engr as necessary.', 
                Tools => 'Debug based on error',
            ],
            inf_field => "Hbase_database_check",
            inf_default => "none",
        };

        foreach my $table (keys %{ $regionSplits }) {
            $queries{"$table - number of regions"} = {
                warn    => 'previousAnswer && answer && (previousAnswer + 10 <= answer)',
                crit    => 'previousAnswer && answer && (previousAnswer + 30 <= answer)',
                perl        => sub { return $regionSplits->{$table}; },
                noRowCount  => 1,
                uiHint      => 'Regions',
                recordMaxResults                => 1000,
                recordDataType => 'gauge',
                ticketOnWarnOpenAfterMinutes    => 1,
                description         => qq`Runs 'hbase hbck' to obtain the # of regions per table. If the
                    # of regions is greater than 10 a day, it should be investigated. Greater than 30, immediate
                    investigation is required. Too many regions causes performance issues.`,
                correctiveActions   => [
                    Ops => 'Escalate to Engineering to investigate why the table is splitting so many times', 
                ],
                inf_field => "number_of_regions",
                inf_tags => qq|table="$table"|,
                inf_default => "none",
                group_by => $table,
            };
        }

    } else {
        $queries{'Hbase master status'} = {
            warn                => 'answer ne "OK"',
            crit                => 'previousAnswer ne "OK" && answer ne "OK"',
            noRowCount          => 1,
            perl                => sub { return hbaseMasterStatus($hadoop); },
            description         => qq`Runs the 'status' and 'list' command in hbase shell to check the status
                of hbase master and its region nodes. This verifies the hbase master is able to
                respond to requests and along with verifying region nodes are all up and running.`,
            correctiveActions   => [
                Ops => 'Ensure all the Hbase master and region nodes are up and running, otherwise ' .
                    'escalate to Tools for further troubleshooting.',
                Tools => qq`Debug based on error`,
            ],
            inf_field => "Hbase_master_status",
            inf_default => "none",
        };
    }

    my $email = $me->default('notify.email');
    $queries{influx_details} = {measurement => "hbase_status"};

    my $qm = ariba::monitor::QueryManager->newWithDetails('hbase', $hadoop->name(), $hadoop->service(), $hadoop->customer(), $hadoop->currentCluster(), \%queries);
    $qm->processQueries($debug, $email, $sendEmail, $sendPage);
} 

sub hbaseMasterStatus {
    my $me = shift;
    my $query = $ariba::monitor::Query::_ourGlobalQuerySelf;

    my $regionServerCount = scalar(grep { $_->appName eq 'HbaseRegion' } $me->appInstances());

    my $cmd = 'echo "status" | hbase shell';

    ariba::Ops::Startup::Hadoop::setRuntimeEnv($me);
    debug("Running $cmd");
    my $output = r($cmd, 1);

    dmail::LockLib::releaselock($lockfile);

    #Output: 2 servers, 0 dead, 2487.5000 average load
    if ($output && $output =~ /(\d+) servers, (\d+) dead/) {
        my $serverCount = $1; 
        my $deadCount = $2; 

        if ($serverCount == 0) {
            return "There are no region nodes?\n$output"; 
        } elsif ($deadCount == $serverCount) { 
            return "All servers are dead.\n$output"; 
        } elsif ($serverCount != $regionServerCount) {
            return "There should be $regionServerCount region servers, but hbase master is reporting $serverCount?\n$output";
        }
    } elsif ($output) {
        return "Invalid output from '$cmd': $output";
    }else {
        return "No output from '$cmd': $!";
    }

    $cmd = 'echo "list" | hbase shell';
    debug("Running $cmd");

    $output = r($cmd, 1);

    if ($output && $output =~ /TABLE/) {
        if ($output =~ /Error:/i) {
            return "List failed: $output";
        } elsif ($output =~ /^0 row/m) { 
            $query->deleteCrit();
            return "No tables in hbase?\n$output"; 
        }
    } elsif ($output) {
        return "Invalid output from '$cmd': $output";
    }else {
        return "No output from '$cmd': $!";
    }

    return 'OK';
}

sub runHbck {
    my $me = shift;
    ariba::Ops::Startup::Hadoop::setRuntimeEnv($me);

    my $cmd = 'hbase hbck 2>&1';
    debug("Running '$cmd'");
    my $outputLine = r($cmd, 1);
    my @output = split('\n',$outputLine);
    my @filteredOutput; 
    my $status = 0;
    my %regionSplits;   # table => # of regions

    dmail::LockLib::releaselock($lockfile);

    my $table; 
    foreach my $line (@output) {
        # Skip INFO, DEBUG, Deployed on, Summary
        next if ($line =~ /(?:INFO|DEBUG|Deployed on|Summary)\b/o);

        # Collection regions info
        if ($line =~ /^(?:Table)?\s+([\w\-\.]+) is \w+\.$/o) { 
            $table = $1;
            next;
        } elsif ($table && $line =~ /Number of regions: (\d+)/) {
            $regionSplits{$table} = $1; 
            next;
        } elsif ($line =~ /^Status:\s(\w+)/) {
            $status = $1;
            next;
        }

        push(@filteredOutput, $line);
    }
    @filteredOutput = @output unless (@filteredOutput);

    return join('', @filteredOutput), \%regionSplits, $status;
}


main(@ARGV);
