#!/usr/local/bin/perl -w 

use strict;
use FindBin; 
use lib "$FindBin::Bin/../../lib";

use Date::Parse;
use POSIX qw(strftime);

use ariba::rc::Globals;
use ariba::rc::InstalledProduct;
use ariba::Ops::Machine;
use ariba::Ops::DateTime;
use ariba::Ops::Startup::Hadoop;
use ariba::Ops::NetworkUtils;
use ariba::util::Misc;
use ariba::monitor::QueryManager;

our $quiet = 1; # Suppresses prints in ariba::Ops::Startup::Common.pm
my $debug = 0;

sub usage {
    my $error = shift; 

    print <<USAGE;
Usage: $0 [-e|-p|-d|-h]
Sends job status information to monitoring

    -e        Enables sending of email for monitor query.
    -p        Enables sending of pages for monitor query.
    -d        Turns on debug mode. 
    -h        Shows this help.

USAGE

    print "(error) $error\n" if ($error);

    exit();
}

sub main {
    my $sendEmail = 0;
    my $sendPage = 0;

    while (my $arg = shift) {
        if ($arg =~ /^-h$/o) { usage();             next; }
        if ($arg =~ /^-d$/o) { $debug++;        next; }
        if ($arg =~ /^-e$/o) { $sendEmail = 1;  next; }
        if ($arg =~ /^-p$/o) { $sendPage = 1;   next; }

        usage("Invalid argument: $arg");
    }

    my $me = ariba::rc::InstalledProduct->new();
    exit unless (ariba::rc::InstalledProduct->isInstalled('hadoop', $me->service()));
    my $hadoop = ariba::rc::InstalledProduct->new('hadoop', $me->service());
    my $cluster = $hadoop->currentCluster();

    my ($virtualHost) = $hadoop->rolesManager()->virtualHostsForRoleInCluster('hadoop-name', $cluster);
    if ($virtualHost) {
        my $activeHost = $hadoop->activeHostForVirtualHostInCluster($virtualHost, $cluster);
        my $host = ariba::Ops::NetworkUtils::hostname();
        debug("Current Host: $host / Active Host: $activeHost / Virtual Host: $virtualHost");   
        if ($host ne $activeHost) {
            debug("Exiting as current host is not the active host");
            exit(0);
        }
    }

    my %queries;
    
    $queries{'failed jobs in last hour'} = { 
        recordItem => 'numrows',
        recordMaxResults => 35000, 
        perl => sub { main::failedJobsInLastHours($hadoop, 1); },
        inf_field => "failed_jobs_in_last_hour",
        inf_default => 0, 
    };



    my $email = $me->default('notify.email');
    $queries{"influx_details"} = {measurement => "MapReduce_Status"};

    my $qm = ariba::monitor::QueryManager->newWithDetails('MapReduce', $hadoop->name(), $hadoop->service(), $hadoop->customer(), $hadoop->currentCluster(), \%queries);
    $qm->processQueries($debug, $email, $sendEmail, $sendPage);
} 

sub failedJobsInLastHours {
    my $me = shift;
    my $hoursAgo = shift; 

    ariba::Ops::Startup::Hadoop::setRuntimeEnv($me);
    my $query = $ariba::monitor::Query::_ourGlobalQuerySelf;

    $ENV{'HADOOP_HOME'} = $ENV{'HADOOP_HOME'} . "/share/hadoop/mapreduce1";
    my $cmd = "$ENV{'HADOOP_HOME'}/bin/hadoop job -list all";

    # Sample command run on LAB service:
    # /home/svclab/hadoop/HadoopR2-40/hadoop/share/hadoop/mapreduce1/bin/hadoop job -list all
 
    my @output = `$cmd`;

    if (!@output) {
        $! = 'No result' unless ($!);
        $query->setError("Error getting running jobs: $!");
        return $query->error();
    }

    # Sample output
    # States are:
    # Running : 1	Succeded : 2	Failed : 3	Prep : 4
    # JobId	State	StartTime	UserName	Priority	SchedulingInfo
    # job_201405281527_0027	2	1401925398430	svclab	NORMAL	0 running map tasks using 0 map slots. 0 additional slots reserved. 0 running reduce tasks using 0 reduce slots. 0 additional slots reserved.

    my @failedJobs;
    my $startTime = time() - $hoursAgo * 60 * 60; 
    foreach my $line (@output) {
        if ($line =~ /^(job_\d+_\d+)\s+(\d+)\s+(\d+)\s+/) {
            my $jobId = $1; 
            my $status = $2;

            ## Only report on  failed jobs
            next unless $status == 3;
            my $time = ($3 / 1000);
            push(@failedJobs, $jobId) if ($time >= $startTime);
        }
    }

    return join("\n", @failedJobs);
}

sub debug {
    my $msg = shift; 

    print "(debug) $msg\n" if ($debug);
}

main(@ARGV);
