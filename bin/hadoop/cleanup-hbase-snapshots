#!/usr/local/bin/perl -w

# $Id: //ariba/services/monitor/bin/hadoop/cleanup-hbase-snapshots#1 $

#
# Cleanup of hdfs exports that are more than
# a specified number of days. Currenlty devlab and PROD
# retention period are different (longer in PROD)
#

use strict;
use FindBin;
use lib "$FindBin::Bin/../../lib";
use POSIX qw(strftime);
use Time::Local;
use Date::Calc;

use ariba::monitor::Query;
use ariba::monitor::QueryManager;
use ariba::Ops::Constants;
use ariba::Ops::Startup::Hadoop;
use ariba::rc::InstalledProduct;
use ariba::rc::Utils;

my $debug = 0;

sub usage {
    my $error = shift; 

    print <<USAGE;
Usage: $0 [-e|-p|-d|-h] <-full|-incremental|-snapshot>
    -days Retention period in days
    -e    Enables sending of email for monitor query.
    -p    Enables sending of pages for monitor query.
    -d    Turns on debug mode. 
    -h    Shows this help.

USAGE

    print "(error) $error\n" if ($error);

    exit();
}

sub main {
    my $sendEmail = 0;
    my $sendPage = 0;
    my $days;

    while (my $arg = shift) {
        if ($arg =~ /^-days$/o) { $days = shift; next; }
        if ($arg =~ /^-h$/o) { usage();          next; }
        if ($arg =~ /^-d$/o) { $debug++;         next; }
        if ($arg =~ /^-e$/o) { $sendEmail = 1;   next; }
        if ($arg =~ /^-p$/o) { $sendPage = 1;    next; }

        usage("Invalid argument: $arg");
    }

    usage("-days must be specified\n") unless $days;

    my $me = ariba::rc::InstalledProduct->new();
    exit unless (ariba::rc::InstalledProduct->isInstalled('hadoop', $me->service()));
    my $hadoop = ariba::rc::InstalledProduct->new('hadoop', $me->service());
    my $cluster = $hadoop->currentCluster();

    my ($virtualHost) = $hadoop->rolesManager()->virtualHostsForRoleInCluster('hbase-master', $cluster);
    if ($virtualHost) {
        my $activeHost = $hadoop->activeHostForVirtualHostInCluster($virtualHost, $cluster);
        my $host = ariba::Ops::NetworkUtils::hostname();
        debug("Current Host: $host / Active Host: $activeHost / Virtual Host: $virtualHost");
        if ($host ne $activeHost) {
            debug("Exiting as current host is not the active host");
            exit(0);
        }
    }

    ariba::Ops::Startup::Hadoop::setRuntimeEnv($hadoop);

    ## Get list of all snapshots
    my $cmd = "hdfs dfs -ls /hbase/.snapshot";

    my $snapshotResults = r($cmd, 1);
    my @output = split("\n", $snapshotResults);
    my $snapshots = snapshotInfo(\@output, "tables", $days);

    if (@$snapshots > 0) {
        my $cmdDeleteSnapshots;
        my $deleteResults;

        #
        # Cleanup snapshots greater than $days days via delete_snapshot
        # delete_snapshot <table_name>
        # ie. delete_snapshot  'ss.2014.03.17.13.00.13.buyer.ariba.arches.datastore.TenantInfo'
        #
        foreach my $snapshot (@$snapshots) {
            my $cmdDelete = "delete_snapshot '\"$snapshot\"'";
            $cmdDeleteSnapshots .= $cmdDelete . "\n";
        }

        my $cmdDeleteSnapshotsAll = "echo \"$cmdDeleteSnapshots\" | hbase shell";

        if ($debug) {
            print "Would have cleaned up snapshots > $days days via $cmdDeleteSnapshotsAll\n";
        } else {
            print "Cleaning snapshots > $days days via $cmdDeleteSnapshotsAll\n";
            $deleteResults = r($cmdDeleteSnapshotsAll, 1);
        }
    } else {
        debug("No snapshots > $days days");
    }

    my $oldestSnapshot = snapshotInfo(\@output, "time", $days);

    my %queries;

    $queries{"Date of oldest hbase snapshot"} = {
        format => "</td><td>%s",
        uiHint  => "snapshots",
        perl => sub { return $oldestSnapshot; },
        description => "Date of oldest hbase snapshot",
        inf_field => "oldest_snapshot_date",
        inf_default => "none",
    };

    my $email = $me->default('notify.email');
    $queries{influx_details} = {measurement => "cleanup_habse_snapshot",};

    my $qm = ariba::monitor::QueryManager->newWithDetails('hbase', $hadoop->name(), $hadoop->service(), $hadoop->customer(), $hadoop->currentCluster(), \%queries);
    $qm->processQueries($debug, $email, $sendEmail, $sendPage);
}

sub snapshotInfo {
    my $output = shift;
    my $type = shift;
    my $days = shift;
    my @snapshotsToDelete;
    my $oldestSnaptime;
    my $snapEpochTime;
    my @times;

    #
    # sample out put that we care about
    # drwxr-xr-x   - svcdev supergroup          0 2014-06-06 08:00 /hbase/.snapshot/ss.2014.06.06.08.00.20.buyer.ariba.arches.datastore.TenantJobCounter
    # drwxr-xr-x   - svcdev supergroup          0 2014-06-06 08:00 /hbase/.snapshot/ss.2014.06.06.08.00.20.buyer.ariba.arches.queue.QueueMessageStatus
    #
    # parse snapshot name / datetime. if > $days, push to array 
    #
    push(my @snapshots, grep ( /\s+\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}\s+\/hbase\/\.snapshot\/.*/, @$output) );

    my $now = time();

    debug("Getting list of all snapshots...");

    for my $snapshot (@snapshots) {
        my ($date, $table, $entry);

        ($date, $table) = $snapshot =~ /\s+(\d{4}-\d{2}-\d{2})\s+\d{2}:\d{2}\s+\/hbase\/\.snapshot\/(ss.*)/;

        next unless($date && $table);

        my ($year, $mon, $day) = split('-', $date);
        my @snapTime = split('-', $date);
        $snapEpochTime = timelocal(0, 0, 0, $day, $mon-1, $year);
        push(@times, $snapEpochTime);
 
        my @nowTime = (localtime($now)) [5, 4, 3];
        $nowTime[0] += 1900;
        $nowTime[1]++;

        my $diffDays = Date::Calc::Delta_Days(@snapTime, @nowTime); 

        if ($diffDays > $days) {
            push(@snapshotsToDelete, $table);
        }
    }

    if ($type =~ /^tables$/) {
        return \@snapshotsToDelete;
    } elsif ($type =~ /^time$/) {
        $oldestSnaptime = (sort {$a <=> $b} @times)[0];
        return strftime("%Y-%m-%d", localtime($oldestSnaptime));
    }
}

sub debug {
    my $msg = shift; 

    print "(debug) $msg\n" if ($debug);
}

main(@ARGV);

__END__
