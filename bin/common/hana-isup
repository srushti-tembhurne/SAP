#!/usr/local/bin/perl

# $Id: //ariba/services/monitor/bin/common/hana-isup#6 $

use strict;
use warnings;
use Data::Dumper;
use File::Basename;

use FindBin;
use lib "$FindBin::Bin/../../lib";

use ariba::monitor::Query;
use ariba::monitor::QueryManager;
use ariba::rc::InstalledProduct;
use ariba::monitor::OutageSchedule;
use ariba::Ops::DBConnection;
use ariba::Ops::HanaClient;
use dmail::LockLib;

use constant { TRUE => 1, FALSE => 0 };

# num secs to wait trying to obtain a db connection
use constant CONNECT_TIMEOUT  =>  20;

# num of tries to obtain a db connection
use constant NUM_TRIES        =>   2;

# the global watchdog timeout. Should typically be set to no greater than cron run interval - 1 minute.
use constant WATCHDOG_TIMEOUT => 240;

# constants for stratus/influx
use constant { OK => 2, SICK => 1, FAIL => 0 };

my $physicalDrOutage = ariba::monitor::OutageSchedule->new(
    'daily 07:00-08:00',    # bcv-backup s4 snap
    'daily 19:00-20:00',    # bcv-backup s4 snap
    'thu 09:00-10:00',      # bcv-backup s4 incrementalPhysical
);

my $debug  = FALSE;
my $wto    = WATCHDOG_TIMEOUT;
my $cto    = CONNECT_TIMEOUT;
my $ntries = NUM_TRIES;

my $prog = basename($0);
my $LOCKFILE = "/tmp/$prog";

sub usage {
    my $error = shift;

    print <<USAGE;

Usage: $0 [-c N|-n N|-w N|-e|-p|-d|-h]

    -c    connect timeout in secs.  (default: @{[CONNECT_TIMEOUT()]})
    -n    num tries to connect.     (default: @{[NUM_TRIES()]})
    -w    watchdog timeout in secs. (default: @{[WATCHDOG_TIMEOUT()]})
    -e    Enables sending of email for monitor query.
    -p    Enables sending of pages for monitor query.
    -d    Turns on debug mode.
    -h    Shows this help.

USAGE

    print "(error) $error\n\n" if ($error);
    exit();
}

# for stratus/influx:
# measurement: hana_isup
#
# required tags (for all stat types):
#   product   : $dbc->product->name
#   service   : $mon->service
#   db_host   : $dbc->host
#   port      : $dbc->port
#   clusterID : db_host@port
#   type      :  "host" | "cluster"
#
# add'l tags for type = host
#   host      : simple hostname, from @{$hanaClient->(master/slaves/standbys)}
#   host_type : "master" | "slave" | "standby"
#
# add'l tags for type = cluster
#   cluster_type : "mdc_master" | "mdc_tenant" : "singleDB"
#   sysdb_host   : $hanaClient->sysdb_host (only set if cluster_type = "mdc_tenant")
#
# common fields:
#   status    : 2 (ok) | 1 (sick) | 0 (down)
#               (right now we're just using 2 and 0. 1 is reserved for future use.)
#   timeout   : 0 (ok) | 1 (connect attempt timed out)
#
# add'l fields for type = cluster:
#   mdc_master : TRUE | FALSE
#   mdc_tenant : TRUE | FALSE
#   singleDB   : TRUE | FALSE
#
# add'l fields for type = host:
#   master  : TRUE | FALSE
#   slave   : TRUE | FALSE
#   standby : TRUE | FALSE

my $influx_measurement = 'hana_isup';
my %required_tags = (
    all     => [ qw(product service db_host port clusterID type) ],
    host    => [ qw(host) ],
);

sub statsd_verify {
    my $data = shift;
    my $func = (caller(2))[3];

    my $err_str = "$func: the following required";

    my $err = FALSE;
    for my $type (keys %required_tags) {
        if($type eq 'all') {
            my @missing;
            for my $tag (@{$required_tags{all}}) {
                push(@missing, $tag) unless $data->{tags}->{$tag};
            }
            if(@missing) {
                print "$err_str tags are missing: " . join(", ", @missing) . "\n" if $debug;
                $err = TRUE;
            }
        }
        else {
            if($data->{tags}->{type} eq $type) {
                my @missing;
                for my $tag (@{$required_tags{$type}}) {
                    push(@missing, $tag) unless $data->{tags}->{$tag};
                }
                if(@missing) {
                    print "$err_str $type tags are missing: " . join(", ", @missing) . "\n" if $debug;
                    $err = TRUE;
                }
            }
        }
    }
    return ! $err;
}

sub do_statsd {
    my $data = shift;

    return unless statsd_verify($data);

    my %influx_data = ( measurement => $influx_measurement, %$data );

    eval {
        my $statsd_line = ariba::Ops::Utils::generateStatsDLine(\%influx_data);
        ariba::Ops::Utils::sendToStatsD($statsd_line, undef, undef, $debug) if $statsd_line;
    };
}

sub parse_dbc {
    my $dbc = shift;

    my $host      =  $dbc->host();
    $host         =~ s/:\d+//; # strip port
    my $port      =  $dbc->port();
    my $dbsid     =  uc($dbc->sid());
    $dbsid        =~ s/^([^.]+).*/$1/;
    my $dbname    =  $dbc->dbname ? uc($dbc->dbname) : $dbsid;
    my $hanaHosts =  [ sort(@{$dbc->hanaHosts()}) ]; # sort to minimize frivolous standby connect errors

    return ($host, $port, $dbsid, $dbname, $hanaHosts);
}

sub main {
    my $sendEmail = FALSE;
    my $sendPage  = FALSE;
    while(my $arg = shift) {
        if($arg eq '-h') { usage();            next; }
        if($arg eq '-d') { $debug++;           next; }
        if($arg eq '-e') { $sendEmail = TRUE;  next; }
        if($arg eq '-p') { $sendPage  = TRUE;  next; }
        if($arg eq '-c') { $cto       = shift; next; }
        if($arg eq '-w') { $wto       = shift; next; }
        if($arg eq '-n') { $ntries    = shift; next; }

        usage("Invalid argument: $arg");
    }

    usage("'-w' must be positive integer") unless $wto    =~ /^\d+$/;
    usage("'-t' must be positive integer") unless $cto    =~ /^\d+$/;
    usage("'-c' must be positive integer") unless $ntries =~ /^\d+$/;

    print "watchdog timeout: $wto secs ; connect timeout: $cto secs ; num tries: $ntries\n" if $debug;

    unless(dmail::LockLib::requestlock($LOCKFILE, 5)) {
         warn "can't grab lock\n";
         exit(-1);
    }

    my $me = ariba::rc::InstalledProduct->new();
    my $email = $me->default('notify.email');
    my @products = ariba::rc::InstalledProduct->installedProductsList($me->service());

    my $dbuser = $me->default( "dbainfo.hana.system.username" );
    my $dbpass = $me->default( "dbainfo.hana.system.password" );
    my $isProdMsServce = 0;
    if (ariba::Ops::ServiceController::isProductionMsServicesOnly($me->service())){
        $isProdMsServce = 1;
    }

    my (%kids, %parent_queries, %parent_inf_data);
    foreach my $product (@products) {
        my $pname = lc($product->name());
        my $subDirPName = $me->name();
        if ($isProdMsServce || ($pname eq 'srs') ){
            undef %parent_queries;
            $subDirPName = $product->name();
        }

        # set default influx tags for this instance
        my %influx_default_tags = ( product => $pname, service => $me->service );

        # ebs does not use hana, but for some reason pulls the hana info from AN's configs.  Skip it.
        next if $pname eq 'ebs';

        my @all_dbcs = ariba::Ops::DBConnection->connectionsFromProducts([$product]);
        my @unique_dbcs = ariba::Ops::DBConnection->uniqueConnectionsByHostAndPort(@all_dbcs);

        for my $dbc (@unique_dbcs) {
            # we can't query the DR cluster 'cuz it's in 'standby' mode and is only responsive to data replication.
            next if $dbc->isDR() || $dbc->dbServerType() ne ariba::Ops::DBConnection->hanaDBServerType();

            my ($host, $port, $dbsid, $dbname, $hanaHosts) = parse_dbc($dbc);
            my $qm_index  = "$host:$port:$dbsid:$dbname";
            my $clusterID = "$host\@$port";

            # note that by the current logic we'll never be in "outage" mode, but I'm leaving it commented-out
            # here just in case we ever have the need to really fix and exercise this feature...
            #my $isPhysicalDr = $dbc->isDR()  && $dbc->isPhysicalReplication();
            #my $outage       = $isPhysicalDr && $physicalDrOutage->isInScheduledOutage();
            my $outage = FALSE;

            # DBAs want us to indicate, for each cluster, whether it's an MDC tenant or not.
            # We add this to the hostIndex hash key in the child, after a successful connect().
            #
            # But in the case of child timeout, there's no way to know this, but we still want to
            # show a status and trigger an alert on the cluster connect failure.
            #
            # Therefore, to avoid stale query objects and associated confusion, we'll have to
            # maintain a cluster-level query object at the parent level, that can be updated
            # in the watchdog timeout section.
            #
            # HOA-130798/HOA-184816: many alerts are happening due to watchdog timeout, while full backups
            # are running. The theory is that hana is blocking queries to system tables while they're being
            # backed up. Ideal solution is to cache these system table queries because it's topology info
            # that changes infrequently, but  that'll take some work to implement. For now we'll just
            # utilize previousAnswer, in the hopes that next time we run, the query will be unblocked.
            my $hostIndex = "($pname) [$qm_index]";
            my $cluster_title = "Hana ISUP: _cluster connection $hostIndex";
            $parent_queries{$cluster_title} = {
                    # retain 1 year of results: 12 runs/hr x 24 hrs/day * 365 days = 105120
                    recordDataUnits => '1 = up, 0 = down',
                    recordMaxResults => 110000,
                    # we want to explicitly record "1" for up, and "0" for down, in the cdb.
                    # alternatively, we could have used "$self->status()" instead of "answer" here,
                    # but I felt it would be slightly more legible this way.
                    recordItem => '"answer" eq "YES" ? 1 : 0',
                    info => 'answer eq "YES"',
                    warn => 'answer ne "YES"',
                    crit => 'answer ne "YES" and previousAnswer ne "YES"',
                    noCritOnError => $outage,
                    perl => sub { return 'YES'; },
                };

            # HOA-186419: send the parent results to influx in the case of child timeout.
            # Note that some tags/fields (cluster_type, sysdb_host) can't be set here because they're unknown
            # at this point -- we obtain their values by querying system tables after connecting.
            %{$parent_inf_data{$cluster_title}{inf_data}} = ( %influx_default_tags, clusterID => $clusterID,
                                                              db_host => $host, port => $port );
            @{$parent_inf_data{$cluster_title}{hosts}} = map { /^([^.:]+)/ && $1 } @$hanaHosts;

            my $kid = fork();
            if($kid == 0) {
                my %queries;

                my $hanaClient = ariba::Ops::HanaClient->new($dbuser, $dbpass, $host, $port, $hanaHosts);
                $hanaClient->setDebug($debug > 1); # enable low-level hanaClient debug only if more than one "-d" supplied

                my $clusterConnectStatus = "YES";
                # HOA-130696 - we now must invoke a method that'll force a cluster config load.
                # Otherwise, it'll happen when we try to cycle thru the hana hosts later on.
                # And if there's a config load failure at that time, we'll be stuck with no
                # hostnames for our query objects.
                $clusterConnectStatus = $hanaClient->error()
                    unless $hanaClient->connect($cto, $ntries) && $hanaClient->master;

                my $inf_status  = $clusterConnectStatus eq 'YES' ? OK : FAIL;
                my $inf_timeout = ($hanaClient->error && $hanaClient->error =~ /timed?[- ]?out/i) ? TRUE : FALSE;

                # is this an MDC tenant?
                # pass in the tenant's master host so we can record systemdb cluster status as an FQDN. this will
                # also enable us to marry systemdb cluster to tenant cluster by joining on db_host (or $dbc->host).
                my $tenant    =  do_sysdb_query(\%queries, $dbsid, $dbuser, $dbpass, $hanaClient, $clusterConnectStatus,
                                                $outage, $host, \%influx_default_tags);
                my $hostIndex = "($pname)$tenant [$qm_index]";
                my $sysdb_host = $hanaClient->sysdb_host if $tenant;

                # If this query-object returns crit it means we failed to connect to the cluster at all
                $queries{"Hana ISUP: _cluster connection $hostIndex"} = {
                    # retain 1 year of results: 12 runs/hr x 24 hrs/day * 365 days = 105120
                    recordDataUnits => '1 = up, 0 = down',
                    recordMaxResults => 110000,
                    # we want to explicitly record "1" for up, and "0" for down, in the cdb.
                    # alternatively, we could have used "$self->status()" instead of "answer" here,
                    # but I felt it would be slightly more legible this way.
                    recordItem => '"answer" eq "YES" ? 1 : 0',
                    info => 'answer',
                    crit => 'answer ne "YES"',
                    noCritOnError => $outage,
                    perl => sub { return $clusterConnectStatus; },
                };

                # cluster level stats for influx
                my %inf_data = ( tags => { %influx_default_tags, clusterID => $clusterID,
                                           db_host => $host, port => $port } );
                $inf_data{tags}->{type} = 'cluster';
                # we only know cluster type if we have a good status
                my $cluster_type;
                if($inf_status == OK) {
                    $cluster_type = $tenant ? 'mdc_tenant' : 'singleDB';
                    $inf_data{tags}->{cluster_type}  = $cluster_type;
                    $inf_data{tags}->{sysdb_host}    = $sysdb_host if $sysdb_host;
                    $inf_data{data}->{$cluster_type} = TRUE;
                }
                $inf_data{data}->{status}  = $inf_status;
                $inf_data{data}->{timeout} = $inf_timeout;
                do_statsd(\%inf_data);

                # done with the cluster-level influx stats, so delete the cluster-specific info
                delete $inf_data{tags}->{cluster_type};
                delete $inf_data{data}->{$cluster_type} if $cluster_type;
                delete $inf_data{tags}->{sysdb_host}    if $sysdb_host;

                # short-circuit the standby queries
                do_standby_queries(\%queries, $dbsid, $hanaClient, $clusterID, \%influx_default_tags);

                # loop over all hosts for the cluster.  Establish a connection to the host an run sql
                # to see if it's up.
                #
                # If we could not establish a connection to the cluster (above) then set the isup status
                # to warn for each host.  An alert for the general connection failure will be sent.
                # No need to alert for each host in that case.

                $inf_data{tags}->{type} = 'host';
                if($clusterConnectStatus ne 'YES') {
                    # must use the originally-supplied hanaHosts here to avoid staleness, because real hana hosts will
                    # be undefined. But real hosts as defined in hana config are simple hostnames, not FQDN's, so we'll
                    # have to massage that here as well.
                    #
                    # HOA-186253: hostnames in config files should always be FQDNs but we've seen cases where it's not,
                    # and also includes a legacy-style ":<port>" in the hostname. This breaks statsd protocol.
                    my @simple_hostnames = map { /^([^.:]+)/ && $1 } @{$hanaClient->hanaHosts};

                    for my $hanaHost (@simple_hostnames) {
                        $hostIndex = "($pname)$tenant [$hanaHost:$port:$dbsid:$dbname]";
                        my $title  = "Hana ISUP: host connection $hostIndex";

                        $queries{$title} = {
                            warn => 1,
                            perl => sub { return 'Could not connect to cluster' },
                            noCritOnError => $outage,
                        };

                        # host level stats for influx
                        $inf_data{tags}->{host} = $hanaHost;
                        do_statsd(\%inf_data);
                    }
                }
                else {
                    # after connecting, get the real list of hanaHosts, which can be different from those in the static
                    # product config (in the DBC object).
                    #
                    # this is mainly important for scale-out clusters, which have one or more "floating" standby hosts,
                    # that can, at any point in time, take over the role of a master or slave node, in which case the
                    # previous master/slave, when repaired by DBAs, becomes the standby.
                    #
                    # for scale-UP deployments, there are no slaves or standbys -- everything runs on a single node, and
                    # the entire node fails over to an HA standby. all access happens thru a VIP instead of individual
                    # node hosts as happens in scale-out deployments.
                    #
                    # NOTE: this was previously being automatically set in ariba::Ops::HanaClient at connect-time, but we
                    # need to make hana connect more light-weight. So the cluster config now only gets loaded when needed.
                    # We trigger that by querying the appropriate methods. Also, it's not good practice to dynamically
                    # redefine a constructor parameter.

                    my @real_hanaHosts  = ($hanaClient->master, @{$hanaClient->slaves});
                    my ($connectedHost) = $hanaClient->connectedHost =~ /^([^.]+)/;
                    foreach my $hanaHost (@real_hanaHosts) {
                        $hostIndex = "($pname)$tenant [$hanaHost:$port:$dbsid:$dbname]";
                        my $title  = "Hana ISUP: host connection $hostIndex";

                        my $connectStatus = "YES";
                        my $inf_status    = OK;
                        my $inf_timeout   = FALSE;
                        $queries{$title} = {
                            # see comments in _cluster query above for details.
                            recordDataUnits => '1 = up, 0 = down',
                            recordMaxResults => 110000,
                            recordItem => '"answer" eq "YES" ? 1 : 0',
                            info => 'answer',
                            crit => 'answer ne "YES"',
                            perl => sub { return $connectStatus; },
                            noCritOnError => $outage,
                        };

                        # host level stats for influx
                        # I must be either master or slave
                        my $host_type = $hanaHost eq $hanaClient->master ? 'master' : 'slave';
                        $inf_data{tags}->{host}       = $hanaHost;
                        $inf_data{tags}->{host_type}  = $host_type;
                        $inf_data{data}->{status}     = $inf_status;
                        $inf_data{data}->{$host_type} = TRUE;

                        if($connectedHost =~ /$hanaHost/) {
                            # HOA-172594: no need to re-check the host that gave us our successful cluster connection!
                            print "no need to check $hanaHost:$port (it's the cluster connected host)\n" if $debug;
                            do_statsd(\%inf_data);
                            delete $inf_data{data}->{$host_type};
                            next;
                        }

                        my $host_hanaClient = ariba::Ops::HanaClient->new($dbuser, $dbpass, $hanaHost, $port, undef, undef);
                        $host_hanaClient->setDebug($debug > 1);
                        $connectStatus = $host_hanaClient->error() unless $host_hanaClient->connect($cto, $ntries);
                        $inf_status    = $connectStatus eq 'YES' ? OK : FAIL;
                        $inf_timeout   = ($host_hanaClient->error && $host_hanaClient->error =~ /timed?[- ]?out/i) ? TRUE : FALSE;

                        $inf_data{data}->{status}  = $inf_status;
                        $inf_data{data}->{timeout} = $inf_timeout;
                        do_statsd(\%inf_data);
                        delete $inf_data{data}->{$host_type};
                    }
                }

                # need to utilize the "subDir" param here so that the multiple parallel hana-isup QM objects don't clobber each other.
                my $qm = ariba::monitor::QueryManager->newWithDetails('hana-isup', $subDirPName, $me->service(), $me->customer(), \%queries, undef, $qm_index);
                $qm->processQueries($debug, $email, $sendEmail, $sendPage);
                exit;
            }
            elsif(! $kid) {
                print "fork() failed: $!";
            }
            else {
                print "main: successfully forked pid $kid\n" if $debug;
                $kids{$kid} = $cluster_title;
            }
        }
        if ( $isProdMsServce && %parent_queries ){
            my $qm = ariba::monitor::QueryManager->newWithDetails('hana-isup', $product->name(), $me->service(), $me->customer(), \%parent_queries);
            $qm->processQueries($debug, $email, $sendEmail, $sendPage);
        }
    }

    # watchdog
    eval {
        local $SIG{ALRM} = sub { die "timeout" };
        alarm $wto;
        while((my $kid = wait()) > 0) {
            print "harvested child pid $kid\n" if $debug;
            delete $kids{$kid};
        }
        alarm 0;
    };
    if($@ && $@ =~ /timeout/) {
        print "timed out waiting for child pids: ", (join ' ', keys %kids), "\n" if $debug;
        for my $kid (keys %kids) {
            kill 'TERM', $kid; sleep 2; kill 'KILL', $kid;
            my $title = $kids{$kid};
            $parent_queries{$title}->{perl} = sub { return "timeout"; };

            # HOA-186419: send to influx
            my %inf_data = ( tags => \%{$parent_inf_data{$title}{inf_data}} );
            $inf_data{tags}->{type}    = 'cluster';
            $inf_data{data}->{timeout} = TRUE;
            $inf_data{data}->{status}  = FAIL;
            do_statsd(\%inf_data);
            $inf_data{tags}->{type} = 'host';
            for my $host (@{$parent_inf_data{$title}{hosts}}) {
                $inf_data{tags}->{host}    = $host;
                $inf_data{data}->{status}  = FAIL;
                do_statsd(\%inf_data);
            }
        }
    }

    unless ( $isProdMsServce ){
        my $qm = ariba::monitor::QueryManager->newWithDetails('hana-isup', $me->name(), $me->service(), $me->customer(), \%parent_queries);
        $qm->processQueries($debug, $email, $sendEmail, $sendPage);
    }
    dmail::LockLib::releaselock($LOCKFILE);
}

# sysdb is cluster-wide (SID scope) and only runs on the cluster master node,
# so no point showing product name. dbname is always SYSTEMDB. A future
# enhancement could be to show all products/dbnames using this host/SID.
#
# TODO (HOA-172595): one big problem here is: this is called from the child that processes its tenant.
# and multiple tenants can share a systemdb. children don't know what other children
# are doing, so the result is that: for MDC deployments, the same systemdb gets checked
# multiple times -- once for each tenant.
#
# for now, this bug will spill over to stratus/influx, in that we will wind up feeding the same systemdb
# stat to influx multiple times.
#
# also note that for stratus/influx, we will send both cluster and host level status for systemdb.
# (TODO: this should be fixed/enhanced similarly for the legacy ops dashboard. (HOA-169195))
sub do_sysdb_query {
    my ($queries, $dbsid, $dbuser, $dbpass, $hanaClient, $clusterConnectStatus, $outage, $tenant_host, $inf_tags) = @_;

    # HOA-189807: if we couldn't connect to the tenant db instance, there's no way to know if it's a tenant and what its
    # SystemDB is. so we'll just return empty string. unfortunately, this means if it really was a tenant, its QO would
    # have " (MDC tenant)" in the name, and now we're returning an empty string, which will cause a different QO to
    # surface. this needs to be solved more elegantly. (Really, we should never have agreed to this design of trying to
    # include the master/tenant info in the QO name.)
    return '' unless $clusterConnectStatus eq "YES"; # no way to know
    return '' unless  (my $sysdb_host = $hanaClient->sysdb_host()); # not an MDC tenant

    my $tenant_str = ' (MDC tenant)';

    my $dbname        = "SYSTEMDB";
    my $sysdb_port    = $hanaClient->sysdb_port();
    my $hostIndex     = "[$sysdb_host:$sysdb_port:$dbsid:$dbname]";
    my $title         = "Hana ISUP: host connection (MDC master) $hostIndex";
    my $clusterID     = "$tenant_host\@$sysdb_port";

    return $tenant_str if $queries->{$title}; # already queried this sysdb (but this hasn't worked ever
                                              # since going to forked children (see comments above)

    my $inf_status  = OK;
    my $inf_timeout = FALSE;
    my $sysdb_hanaClient = ariba::Ops::HanaClient->new($dbuser, $dbpass, $sysdb_host, $sysdb_port, undef, undef);
    $sysdb_hanaClient->setDebug($debug > 1);

    my $sysdbConnectStatus = "YES";
    $sysdbConnectStatus = $sysdb_hanaClient->error() unless $sysdb_hanaClient->connect($cto, $ntries);
    $inf_status    = $sysdbConnectStatus eq "YES" ? OK : FAIL;
    $inf_timeout   = ($sysdb_hanaClient->error && $sysdb_hanaClient->error =~ /timed?[- ]?out/i) ? TRUE : FALSE;

    $queries->{$title} = {
        description => 'the system db for this MDC cluster',
        info => 'answer eq "YES"',
        crit => 'answer ne "YES"',
        perl => sub { return $sysdbConnectStatus; },
        noCritOnError => $outage,
    };

    # send influx cluster level stats
    my %inf_data = ( tags => { %$inf_tags, clusterID => $clusterID, db_host => $tenant_host, port => $sysdb_port,
                               type => 'cluster', cluster_type => 'mdc_master' },
                     data => { status => $inf_status, timeout => $inf_timeout, mdc_master => TRUE } );
    do_statsd(\%inf_data);
    delete $inf_data{tags}->{cluster_type};
    delete $inf_data{data}->{mdc_master};

    # send influx host level stats
    $inf_data{tags}->{type}      = 'host';
    $inf_data{tags}->{host_type} = 'master';
    $inf_data{tags}->{host}      = $sysdb_host;
    $inf_data{data}->{master}    = TRUE;
    do_statsd(\%inf_data);

    return $tenant_str;
}

# standby hosts are cluster-wide (SID scope), so no point
# showing dbname, port, nor product name. A future enhancement
# could be to show all products/dbnames using this host/SID.
sub do_standby_queries {
    my ($queries, $dbsid, $hanaClient, $clusterID, $inf_tags) = @_;

    my ($db_host, $db_port) = split('@', $clusterID);
    my %inf_data = ( tags => { %$inf_tags, clusterID => $clusterID, db_host => $db_host, port => $db_port,
                               type => 'host', host_type => 'standby' },
                     data => { status => OK, standby => TRUE } );

    for my $standbyHost (@{$hanaClient->standbys()}) {
        my $hostIndex = "[$standbyHost:$dbsid]";

        $queries->{"Hana ISUP: host $hostIndex"} = {
            perl => sub { return 'standby' },
            info => 1,
        };

        $inf_data{tags}->{host} = $standbyHost;
        do_statsd(\%inf_data);
    }
}

main(@ARGV);

__END__
