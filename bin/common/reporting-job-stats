#!/usr/local/bin/perl
#
# $Id: //ariba/services/monitor/bin/common/reporting-job-stats#2 $
#

use strict;
use FindBin;
use lib "$FindBin::Bin/../../lib";
use lib "$FindBin::Bin/../../bin";

use ariba::monitor::QueryManager;
use ariba::monitor::Query;
use ariba::monitor::Url;
use ariba::rc::InstalledProduct;
use dmail::LockLib;
use ariba::Ops::DBConnection;
use ariba::Ops::OracleClient;

use Data::Dumper;
use XML::Simple;
use Date::Parse;

sub main
{
    my $debug     = 0;
    my $quiet     = 0;
    my $sendEmail = 0;
    my $sendPage  = 0;
    my $productName;

    while (my $arg = shift (@ARGV))
    {
        print STDERR "parsing arg $arg\n" if $debug && !$quiet;
        if ($arg =~ /^-d/o)    {$debug++;}
        if ($arg =~ /^-e/o)    {$sendEmail = 1;}
        if ($arg =~ /^-p$/o)   {$sendPage = 1;}
        if ($arg =~ /^-prod/o) {$productName = shift (@ARGV);}
    }

    my $me      = ariba::rc::InstalledProduct->new();
    my $cluster = $me->currentCluster();
    my $service = $me->service();
    my $email   = $me->default('notify.email');

    my @products = ariba::rc::InstalledProduct->installedProductsList($service, $productName);

    unless (@products)
    {
        exit (0);
    }

    for my $product (@products)
    {

        my $lockfile = "/tmp/stratus-reporting-job-stats";
        $lockfile .= "-" . $product->name();
        $lockfile .= "-" . $product->customer() if ($product->customer());
        if (!dmail::LockLib::requestlock($lockfile, 5))
        {
            print STDERR "can't grab lock $lockfile\n";
            next;
        }

        my @dbcs = ariba::Ops::DBConnection->connectionsFromProducts($product);
        my $dbc  = $dbcs[0];
        my $oc   = ariba::Ops::OracleClient->newFromDBConnection($dbc);
        $oc->connect();
        my $skip = 0;

        my %queries    = ();
        my $realm_href = {};

        #Durable Email Monitoring

        my %instance_hash;
        my @instance_array;
        map {push (@instance_array, $_)} $product->appInstancesInCluster($cluster);

        #my @instance_array = $product->appInstancesInCluster($cluster);
        my @countgen = (1 .. scalar @instance_array);
        for my $cg (@countgen)
        {
            map {$instance_hash{$cg} = $_} $product->appInstancesInCluster($cluster);
        }

        my $instanceToMonitor = generateRandom(\%instance_hash, scalar @instance_array);

        for my $instance (@$instanceToMonitor)
        {
            my $reportingJobStatsUrl = $instance->reportingJobStatsURL();

            #$reportingJobStatsUrl .= "&lastHours=2400";
            print "current url : $reportingJobStatsUrl   \n" if ($debug > 1);

            my $reportingJobStats = ariba::monitor::Url->new($reportingJobStatsUrl);
            my $results           = $reportingJobStats->request(900);
            print "\n---\n $results \n---\n" if ($debug > 1);

            my $xml_ref = parseReportingJobStats($results);
            print "Dumper of xml:" . Dumper($xml_ref) if ($debug > 1);

            if ($xml_ref)
            {

                if ($xml_ref->{realm})
                {
                    foreach my $realmName (keys (%{$xml_ref->{realm}}))
                    {

                        my $totalFailedReportingJobs;
                        my $realmId = $xml_ref->{realm}->{$realmName}->{id};
                        foreach my $errorType (keys (%{$xml_ref->{realm}->{$realmName}->{status}}))
                        {

                            my $errorCount = $xml_ref->{realm}->{$realmName}->{status}->{$errorType}->{count};
                            $totalFailedReportingJobs += $errorCount;

                            $realm_href->{$realmId}->{'FailedReportingJobs'}->{'errors'}->{$errorType} = $errorCount;
                        }
                        $realm_href->{$realmId}->{'FailedReportingJobs'}->{'TotalCount'} = $totalFailedReportingJobs;
                    }
                }

                #Get all realms from DB
                my @realms = $oc->executeSql("select id from realmtab");    #whatever it is
                print "total number of realms " . scalar (@realms) . "\n" if ($debug > 1);

                foreach my $realm (@realms)
                {
                    my $realmId = $realm->{ID};
                    my $errorCount;
                    my $totalFailedReportingJobs = 0;

                    #If data exist in xml for a given realm and priority ,retrieve it,else make it as 0
                    if (exists $realm_href->{$realmId}->{'FailedReportingJobs'})
                    {
                        $totalFailedReportingJobs = $realm_href->{$realmId}->{'FailedReportingJobs'}->{'TotalCount'};
                    }

                    $queries{"Total failed reporting jobs count for realm $realmId"} = {
                                                                                        'desciption'  => 'Total count of failed reporting jobs',
                                                                                        'severity'    => 2,
                                                                                        'crit'        => "answer >= 5",
                                                                                        'warn'        => "answer >= 3",
                                                                                        'info'        => "defined(answer)",
                                                                                        'uiHint'      => "Realms/Realm $realmId",
                                                                                        'perl'        => sub {return $totalFailedReportingJobs;},
                                                                                        'inf_tags'    => qq(realm_id=$realmId),
                                                                                        'inf_field'   => qq(failed_reporting_jobs_count),
                                                                                        'inf_default' => 0,
                                                                                        'group_by'    => ($realmId),
                                                                                       };
                }

                # Skip parsing of redundant xml
                last;
            }
        }

        $queries{influx_details} = {measurement => 'buyer_reporting_job_stats'};
        my $q = ariba::monitor::QueryManager->newWithDetails("reporting-job-stats", $product->name(), $service, $product->customer(), \%queries);
        $q->processQueries($debug, $email, $sendEmail, $sendPage);

        dmail::LockLib::releaselock($lockfile);
    }
}

sub parseReportingJobStats
{
    my ($xml_content) = @_;

    my $xml_href;
    eval {$xml_href = XMLin($xml_content, ForceArray => 1);};

    if ($@ or ref ($xml_href) !~ /Hash/i)
    {
        return (0);
    }

    return ($xml_href);
}

sub generateRandom
{
    my $ho     = shift;
    my $c      = shift;
    my $random = int (rand ($c)) + 1;
    if ($random + 2 >= $c)
    {
        $random = $random - 2;
    }
    my @randhashfive;
    my @randcount = ($random .. $random + 2);
    foreach my $rc (@randcount)
    {
        push (@randhashfive, $ho->{$rc});
    }
    return \@randhashfive;
}

main();
