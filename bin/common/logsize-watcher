#!/usr/local/bin/perl -w

use strict;
use FindBin;
use lib "$FindBin::Bin/../../lib";

use ariba::monitor::QueryManager;
use ariba::rc::InstalledProduct;
use Data::Dumper;
use LWP::Simple qw($ua get);
use Getopt::Long;

sub usage {
    my $error = shift;

    print <<USAGE;
Usage: $0 [-e|-p|-d|-h|-port] [-cluster <name>]

    -e              Enables sending of email for monitor query.
    -p              Enables sending of pages for monitor query.
    --debug, -d     Turns on debug mode. 
    -h              Shows this help.
    -port           Specifies the port to query the log-viewer.   Default: 61502
    -warn           Specifies the log size to raise warning.      Default: 1.5GB
    -crit           Specifies the log size to raise critical.     Default: 10GB
    -timeout        Sets timeout for hitting log-viewer.          Default: 30 seconds
    -cluster        Specifies the name of the cluster.            Default: Current cluster of the product

USAGE

    print "(error) $error\n" if ($error);
    return 0;
}

sub main {
    my %opts; # setting defaults here
    my $debug               = 0;
    my $sendEmail           = 0;
    my $sendPage            = 0;
    my $port                = ariba::Ops::Constants->logViewerPort();
    my $warn                = 1.5;      # 1.5GB
    my $crit                = 10;       # 10GB
    my $help                = 0;
    my $timeout             = 30; # 30 second timeout for LWP::Simple
    my $cluster;

    GetOptions(
        "h"         => \$help,
        "debug|d"   => sub { $debug++; },
        "e"         => \$sendEmail,
        "p"         => \$sendPage,
        "port=i"    => \$port,
        "warn=i"    => \$warn,
        "crit=i"    => \$crit,
        "timeout=i" => \$timeout,
        "cluster=s" => \$cluster,
    );

    exit( usage() ) if ( $help );

    my $me = ariba::rc::InstalledProduct->new();
    my $service = $me->service();
    my @products = ariba::rc::InstalledProduct::installedProductsList( $service );
    
    my $crit_condition = "answer =~ /crit/"; # purposely set here so that we can "undef" this to prevent pages when hitting log-viewer fails
    
    $ua->timeout($timeout); # setting LWP::Simple timeout
    
    print "DEBUG: $debug\n" if $debug;

    $cluster = $me->currentCluster() unless ( $cluster );

    foreach my $product ( @products ) {
        print $product->name(), "\n" if $debug;
        print "cluster: " . $product->currentCluster() . "\n" if $debug;

        next unless ( $product->currentCluster() eq $cluster );
        
        my @hosts = $product->allHostsInCluster( $product->currentCluster() );
        my %queries;

        my $customer = $product->customer();

        foreach my $host ( @hosts ) {
            print $host, "\n" if $debug;
            
            next if ( $host =~ /^(nfs|storadmin|backup)/ ); # OK list of hostname patterns to skip
            
            my $url = "http://$host:$port/lspat/$service/" . $product->name();
            $url .= "/$customer" if defined ( $customer ); # appending customer to the URL if defined
            
            my $content = LWP::Simple::get( $url );
            my $queryString;
            my $errorString = '';

            if ( $content ) {
                my @lines = split( /\n/, $content );
                
                foreach my $line ( @lines ) {
                    $line =~ s/^\s+//g;
                    my @elements = split( /\s+/, $line );
                    my $size = $elements[0];

                    if ( defined $size && $size =~ /^\d+$/ ) {
                        my ($logName) = $elements[-1] =~ />(.*)</;

                        if ( defined $logName ) {
                            
                            ### Skip warning or critical alert for tls-security log files
                            next if ( $logName =~ /^tls-security/ );
                            
                            my $sizeGB = $size / 1024 / 1024 / 1024; # converting to Gigabytes
                            my $roundedGB = sprintf( "%.2f", $sizeGB );

                            if ( $sizeGB > $crit ) {
                                print "$host crit: $logName size ${roundedGB}GB > ${crit}GB\n" if $debug;
                                $queryString .= "crit: $logName size ${roundedGB}GB > ${crit}GB\n";
                            }
                            elsif ( $sizeGB > $warn ) {
                                print "$host warn: $logName size ${roundedGB}GB > ${warn}GB\n" if $debug;
                                $queryString .= "warn: $logName size ${roundedGB}GB > ${warn}GB\n";
                            }
                        }
                    }
                }
            }
            else {
                $errorString = "error: Could not hit log-viewer on $host";
                $queryString = $errorString;
                $crit_condition = undef;
            }
           
            $queries{ qq|KR log size for $host| } = {
                warn => "answer =~ /warn/",
                crit => $crit_condition,
                error => $errorString,
                description     => "A value of 'none' means that the log size is ok. If the result is an integer value,
                                   then the KR log size is large and requires attention.",
                correctiveActions => [
                    Ops => 'Please take a look at the log and take appropriate action',
                ],
                perl => sub { return $queryString; },
            };
        }
        
        my $email = $me->default('notify.email');
        my $qm = ariba::monitor::QueryManager->newWithDetails('logsize-watcher', $product->name(), $product->service(), $product->customer(), $cluster, \%queries);
        $qm->processQueriesUsingServer($debug, $email, $sendEmail, $sendPage);
    }
}

main();

__END__
