#!/usr/local/bin/perl -w

# $Id: //ariba/services/monitor/bin/common/netapp-cluster-status#9 $

use strict;
use FindBin;
use lib "$FindBin::Bin/../../lib";

use ariba::monitor::StatusPage;
use ariba::monitor::QueryManager;
use ariba::rc::InstalledProduct;
use ariba::Ops::Machine;
use ariba::Ops::ProductAPIExtensions;
use ariba::Ops::DatacenterController;
use ariba::SNMP::Session;

my $debug = 0;
my %result;

sub main {
	my $sendEmail = 0;
	my $sendPage  = 0;

	while (my $arg = shift(@ARGV)) {
		if ($arg =~ /^-e/o) { $sendEmail = 1; };
		if ($arg =~ /^-p/o) { $sendPage  = 1; };
		if ($arg =~ /^-d/o) { $debug     = 1; };
	}

	my $me    = ariba::rc::InstalledProduct->new();
	my $email = $me->default('notify.email');

	for my $dataCenter ( ariba::Ops::ProductAPIExtensions::datacentersForProducts($me) ) {

		my $tab = ariba::monitor::StatusPage::fakeProductNameForDatacenter($dataCenter);

		my %match = (
				status         => 'inservice',
				datacenter     => $dataCenter,
				hardwareVendor => 'netapp',
				);

		my @machines = ariba::Ops::Machine->machinesWithProperties(%match);
		my %queries  = ();

		for my $machine (@machines) {

			my %oidResults = queryOids($machine);
			my $host = $machine->hostname();

			$queries{"$host cluster settings"} = {
				info => "answer eq 'enabled'",
				warn => "answer ne 'enabled' && answer ne 'thisNodeDead'",
				crit => "answer eq 'thisNodeDead'",
				perl => sub {return $oidResults{settings};},
			};

			$queries{"$host cluster state"} = {
				info => "answer eq 'canTakeover'",
				warn => "answer eq 'takeover' || answer eq 'cannotTakeover' || answer eq 'unknown'",
				crit => "answer eq 'dead'",
				perl => sub {return $oidResults{state};},
			};

			$queries{"$host cluster cannot takeover cause"} = {
				info => "answer eq 'ok'",
				warn => "answer eq 'disabledByOperator' || answer eq 'interconnectOffline' || 
					answer eq 'disabledByPartner' || answer eq 'unknown'",
				crit => "answer eq 'takeoverFailed'",
				perl => sub {return $oidResults{cannottakeovercause};},
			};

			$queries{"$host cluster partner status"} = {
				info => "answer eq 'ok'",
				warn => "answer eq 'maybeDown' || answer eq 'unknown'",
				crit => "answer eq 'dead'",
				perl => sub {return $oidResults{partnerstatus};},
			};

			$queries{"$host cluster partner name"} = {
				info => "answer ne 'unknown'",
				crit => "answer eq 'unknown'",
				perl => sub {return $oidResults{partnername};},
			};

			$queries{"$host cluster interconnect status"} = {
				info => "answer eq 'up'",
				warn => "answer eq 'partialFailure' || answer eq 'notPresent' || answer eq 'unknown'",
				crit => "answer eq 'down'",
				perl => sub {return $oidResults{interconnectstatus};},
			};
		}

		my $qm = ariba::monitor::QueryManager->newWithDetails(
				'netapp-cluster-status', $tab, $me->service(), $me->customer(), \%queries
				);

		$qm->processQueriesUsingServer($debug, $email, $sendEmail, $sendPage);
	}
}

sub getOids {
	my $os = shift;

	## tName is Table Name/Subtree in netapp filer
	## ha => Cdot
	## cf => 7 Mode
	my $tName = $os eq "cdot" ? "ha" : "cf";
	my %Oids = (
		'haNodeName'	       => $tName.'NodeName.0',
		'settings'             => $tName.'Settings.0',
		'state'	   	       => $tName.'State.0',
		'cannottakeovercause'  => $tName.'CannotTakeoverCause.0',
		'partnerstatus'        => $tName.'PartnerStatus.0',
		'partnername'          => $tName.'PartnerName.0',
		'interconnectstatus'   => $tName.'InterconnectStatus.0',
	);

	return %Oids;
}

sub queryOids{
    my $machine = shift;

    my $host = $machine->hostname();
    my %oidHash = getOids($machine->os());  ##get Oids
    my $snmp    = ariba::SNMP::Session->newFromMachine($machine) || return;

    if ( $machine->os() eq "cdot" ){
        ## For cluster mode, no need to do SNMP request for every node in cluster
        return %{$result{$host}} if ($result{$host});
        print "SNMP query on Cdot cluster node $host\n" if ($debug);
        CdotWalkOidExpr($snmp,$machine,\%oidHash);
        return %{$result{$host}};
    }else{
        my %resultHash;
	while (my ($key,$oid) = each %oidHash ){
            $resultHash{$key} = $snmp->valueForOidExpr("$oid");
        }
        return %resultHash;
    }
}

sub CdotWalkOidExpr {
    my ($snmp,$machine,$oidHashRef) = @_;

    ####====================================================================####
    ## In Cluster Mode, No need to do SNMP request for every node in cluster
    ## SNMP request returns date for whole cluster 
    ####====================================================================####
    my $node = {};
    while (my ($key,$oid) = each %{$oidHashRef} ){
        my %indexes = $snmp->walkOidExpr($oid);
        for my $index (sort keys %indexes) {
            my ($name,$oidNum) =  $index =~ /(\w+)\.(.*)/;
            if ($name eq "haNodeName" ){      ## haNodeName Oid holds hostname
                my $hostName = $snmp->valueForOidExpr("$index");
                $hostName .= '.'.$machine->dnsDomain() if ($hostName !~ /\.ariba\.com/i); ##append dnsDomain
                $node->{$oidNum} = $hostName;
                next;
            }
            $result{$oidNum}{$key}= $snmp->valueForOidExpr("$index");
        }
    }

    for my $oidNum(sort keys %result){
        next unless($node->{$oidNum});
        $result{$node->{$oidNum}} = delete $result{$oidNum};
    }
}

main();

__END__
