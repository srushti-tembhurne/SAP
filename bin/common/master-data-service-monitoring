#!/usr/local/bin/perl

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../../lib";

use Data::Dumper;
use Getopt::Long qw(:config no_ignore_case_always no_getopt_compat require_order);
use ariba::rc::InstalledProduct;
use ariba::monitor::Url;
use ariba::monitor::QueryManager;

sub main {
    my ($debug, $sendEmail, $sendPage, $productName);
    GetOptions  (
                    'debug|d'         => \$debug,
                    'sendemail|e'     => \$sendEmail,
                    'sendpage|p'      => \$sendPage,
                    'product|prod=s'  => \$productName,
                );

    my $monProduct = ariba::rc::InstalledProduct->new ();
    my $product = ariba::rc::InstalledProduct->new ($productName, $monProduct->service ());
    my $cluster = $product->currentCluster () || 'primary';

	my $adminurl = $product->default("VendedUrls.AdminFrontDoorTopURL");
	my @mdsactions = qw(mdsRealmLooperDelay mdsExportDataDelay mdsWorkItemsDelay mdsParentChildNotSync mdsExtractTaskNotRunning mdsPublishTaskNotRunning);
	my $prodname = $product->name();
	my $service = $product->service();
	my $customer = $product->customer () || undef;
	my $email = $product->default ('notify.email');
	
	my %queries;
	
	my %queryitems = ( 'mdsRealmLooperDelay'  =>  { 'qname' => 'Extract Data Realm Looper Delay ',
	                                                'action' => { 'Ops' => 'Inform Engineering team to investigate.',
	                     'Engr' => 'Check if the scheduler is not able to run for the realms or if there is any problem in the app to run the tasks and take corrective action based on the situation.'},
	                                                 'description' => q(Informs about delay in Realm Looper task to Extract Data for MDS) },
	
	                    'mdsExportDataDelay' =>   { 'qname' => 'Extract Data Delay ',
	                                                'action' =>  { 'Ops' => 'Inform Engineering team to investigate.',
	                                                  'Engr' => 'Check why the extract data is taking so much time. Reasons could be at JVM level,App level or they could be genuine like full load.'}, 
	                                                  'description' => q(Informs about the delay in processing extract data task at individual realm level.) },
	
	                    'mdsWorkItemsDelay' =>    { 'qname' => 'Long Pending Work Items ',
	                                                 'action' => {'Ops' => 'Inform Engineering team to investigate.',
	'Engr' => 'Check why the work items are pending for a long time. Could be that the arches status is not updated or they are blocked because of something else and take corrective action based on the situation.'},
	                                                  'description' => q(Informs about the work items which are long pending at realm level) },
	
	
	                     'mdsParentChildNotSync' => { 'qname' => 'Parent Child Inconsistency ',
	                                                   'action' => {'Ops' => 'Inform Engineering team to investigate.',
	                                                    'Engr' => 'Check why this is happening and take corrective actions, like data fix to handle the situation.'},
	                                              'description' => q(Informs when the parent and child work items are not consistent. Parent is success but there are failures in the child work items) },

	                     'mdsExtractTaskNotRunning' => { 'qname' => ' Extract Task Not runnning ',
	                                                   'action' => {'Ops' => 'Inform Engineering team to investigate.',
	                                                    'Engr' => 'Check why this is happening and take corrective actions, like data fix to handle the situation.'},
	                                              'description' => q(Informs when the failed extract task not running) },

	                     'mdsPublishTaskNotRunning' => { 'qname' => ' Publish Task Not runnning ',
	                                                   'action' => {'Ops' => 'Inform Engineering team to investigate.',
	                                                    'Engr' => 'Check why this is happening and take corrective actions, like data fix to handle the situation.'},
	                                              'description' => q(Informs when the failed publish task not running) },

	
	                  );
	
	foreach my $action(@mdsactions) {
	   
		$prodname =~s/s4/Sourcing/si;
	    my $uri = $adminurl.'/'.ucfirst($prodname).'/Main/ad/'.$action.'/MonitorActions';
	    my $url = ariba::monitor::Url->new( $uri ); 
	    my $response = $url->request();
		print "$url \t $response \n" if($debug);
	    
        my $warnflag;
        print "url : $uri \n" if($debug);
	     my $hoursdelay;
	     my $reccount;
	     my @rec;
	    if ($action eq 'mdsRealmLooperDelay') {
	       if ($response !~ /^No result/i) {
	           $response =~ m/NO_OF_HOURS\|(.*?)\,/;
	            $hoursdelay = $1;
	       } else {
	           $hoursdelay = 0; 
	       }
	         print "**hours delay is $hoursdelay\n" if($debug);
	    } else {
	       if ($response !~ /^No result/i) {
	          @rec = split("\n",$response);
	          $reccount = scalar @rec; 
	       } else {
	          $reccount = 0;
	        }
	          print "**rec count is $reccount\n" if($debug);
	    }
	  
	              $queries {"$queryitems{$action}->{qname}"} =  {
	              correctiveActions => [Ops => "$queryitems{$action}->{action}{Ops}",  Engr => "$queryitems{$action}->{action}{Engr}"],
	              description => "$queryitems{$action}->{description}",
		      uiHint => "$queryitems{$action}->{qname}",
	           };
	          
	        if(defined $hoursdelay) {
	                 $queries{"$queryitems{$action}->{qname}"}->{'perl'} = sub { return "$hoursdelay"; };
	                 $queries{"$queryitems{$action}->{qname}"}->{'warn'} = "answer >= 2";
	        }elsif(defined $reccount) {
			 my @records = map {"$_\n" } @rec;
	                 $queries{"$queryitems{$action}->{qname}"}->{'perl'} = sub { return "@records"; };
	                 #$queries{"$queryitems{$action}->{qname}"}->{'perl'} = sub { return "$reccount"; };
	                 $queries{"$queryitems{$action}->{qname}"}->{'warn'} = "numrows >= 1";
	
	        }
	 
	 
	}
	
	
	         my $qm = ariba::monitor::QueryManager->newWithDetails('MDS', $prodname, $service, $customer, \%queries);
	         $qm->processQueriesUsingServer($debug, $email, $sendEmail, $sendPage);
}
main();
__END__

