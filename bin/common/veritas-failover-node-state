#!/usr/local/bin/perl -w
#
# $Id: //ariba/services/monitor/bin/common/veritas-failover-node-state#12 $
#
# This looks for veritas volumes mounte on the wrong db hosts.
# It is designed for Oracle clusters only with 2 hosts per cluster
# oracle-vip { host.1 host.2 }
#

use strict;
use FindBin;
use lib "$FindBin::Bin/../../lib";

use ariba::monitor::QueryManager;
use ariba::monitor::StatusPage;
use ariba::rc::InstalledProduct;
use ariba::rc::Utils;
use ariba::Ops::DBConnection;
use ariba::Ops::FileSystemUtilsRPC;
use ariba::DBA::SampleSQLQueries;

use File::Basename;
use Data::Dumper;

sub main {

    my $debug=0;
    my $sendEmail=0;
    my $sendPage=0;
    my %VVsForFailoverNodes;

    # Grab the args
    while(my $arg=shift(@ARGV)){
        if ( $arg =~ /^-d/o ) { $debug++; }
        if ( $arg =~ /^-e/o ) { $sendEmail=1; };
        if ( $arg =~ /^-p/o ) { $sendPage=1; };
    }

    # Set debug stuff
    $main::quiet = 1 unless $debug >= 2;

    my $me = ariba::rc::InstalledProduct->new();
    my $email = $me->default('notify.email');
    my @products = ariba::rc::InstalledProduct->installedProductsList($me->service());
    my $cipherStore = ariba::rc::CipherStore->new( $me->service() );
    my $username = "svc" . $me->service();
    my $password = $cipherStore->valueForName($username);
    my $monserver = ($me->hostsForRoleInCluster('monserver', $me->currentCluster()))[0];

    my %queries;
    my $tab = ariba::monitor::StatusPage::commonProduct();
    $| = 1;

    # Loop over the installed products on this host (mon)
    for my $product (@products) {

        %queries = ();

        my $productName = $product->{prodname};
        my @connections = ariba::Ops::DBConnection->connectionsFromProducts($product);

        # Loop over all the database connections
        for my $dbc ( ariba::Ops::DBConnection->uniqueConnectionsByHostAndSid(@connections)) {
            next if $dbc->isHana();

            # not applicable to rman dbs
            my $dbSid = $dbc->sid();
            next if $dbSid =~ /rman/;

            # Only proceed with this db connection if the product config is setup for a
            # database cluster
            my @hosts = $dbc->realHosts();
            my %uniqueHosts = map { $_ => 1 } @hosts;
            next unless (keys(%uniqueHosts) == 2);

            my $ucSid = uc( $dbSid );
            my $vipName = $dbc->host();

            # Loop over the hosts in the cluster and find the active one
            my $primaryHost;
            my @output;
            foreach my $host ( @hosts ) {
                my $cmd = "ssh -l $username $host sudo '/opt/VRTS/bin/hagrp -state | grep -iv offline'";
                ariba::rc::Utils::executeRemoteCommand($cmd, $password, 0, undef, undef, \@output);

                # Loop @output to find the active host based on the sid
                # sample output
                # 1  '#Group         Attribute             System     Value'
                # 2  'AUCPRO1        State                 db101      |ONLINE|'
                foreach my $line ( @output ) {
                    next unless ( $line =~ /${ucSid}\s+State\s+([A-Za-z0-9]+)/ );
                    $primaryHost = $1;
                    $host =~ /^[A-Za-z0-9]+(.+)/;
                    $primaryHost .= $1;
                    last;
                }
                last if $primaryHost;
            }

                        my $standbyHost = ( $primaryHost eq $hosts[0] ) ? $hosts[1] : $hosts[0];
            my $queryName = "$vipName {$hosts[0] $hosts[1]}, Active 3par VVs on primary for sid $dbSid not imported on standby";
            $queries{$queryName} = {
                'uiHint' => $productName,
                'info' => 1,
                'warn' => 0,
                'crit' => 0,
                'perl' => "return 'none'",
                'inf_field' => "active_3par_VVs_not_imported",
            };

            if ( $primaryHost ) {
                $queries{$queryName}->{'inf_tags'} =
                    "SID=\"$dbSid\",primary=\"$primaryHost\",failover=\"$standbyHost\"",
            }
            else {
                $queries{$queryName}->{'crit'} = 1;
                $queries{$queryName}->{'perl'} = "return 'Could not determine active host.  Is the cluster on line?'";
                next;
            }

            # Get all the imported disks on the failover cluster node.
            # Only do it once for each failover node.
            unless ( $VVsForFailoverNodes{$standbyHost} ) {
                my @vvList;
                eval {
                    @vvList = ariba::Ops::FileSystemUtilsRPC::vvsForFailover ($standbyHost, $me->service());
                };

                if ($@) {
                    $queries{$queryName}->{'warn'} = 1;
                    $queries{$queryName}->{'perl'} = "return \"$@\"";
                    next;
                }

                @{ $VVsForFailoverNodes{$standbyHost} } = @vvList;

                print "failover node imported disks: ", join("\n", @{$VVsForFailoverNodes{$standbyHost}}), "\n" if $debug >= 2;
            }

            # Get the list of all the filesystems the db is using on the primary node
            # First, get the list of the active db files and log files.  Then we get the list
            # unique filesystem mountpoint for the files.
            my @dbFiles = filesForDB($me, $dbc, \$queries{$queryName});
            next unless @dbFiles;
            my @mountPoints;

            eval {
                @mountPoints = ariba::Ops::FileSystemUtilsRPC::mountPointsForFileList
                    (\@dbFiles, $primaryHost, $me->service());
            };

            if ($@) {
                $queries{$queryName}->{'warn'} = 1;
                $queries{$queryName}->{'perl'} = "return \"$@\"";
                next;
            }

            my @fsList;
            eval {
                @fsList = ariba::Ops::FileSystemUtilsRPC::vvsForMountPoints(\@mountPoints, $primaryHost, $me->service());
            };

            if ($@) {
                $queries{$queryName}->{'warn'} = 1;
                $queries{$queryName}->{'perl'} = "return \"$@\"";
                next;
            }

            my @problemVvs;
            for my $fsDetails (@fsList) {
                my ($fs, $vvlist) = split(/:/, $fsDetails);
                for my $vvAndWWN (split(/ /, $vvlist)) {
                    my ($vv, $WWn) = split(/,/, $vvAndWWN);
                    unless ( grep(/$vvAndWWN/, @{ $VVsForFailoverNodes{$standbyHost} }) ) {
                        push @problemVvs, "$vv($fs)";
                    }
                }
            }

            if ( scalar(@problemVvs) ) {
                    $queries{$queryName}{'crit'} = 1;
                    $queries{$queryName}{'perl'} = sub { return join(' ', @problemVvs) };
            }

        } # dbcs

        my $qm = ariba::monitor::QueryManager->newWithDetails("veritas-cluster-status", $tab, $me->service(), undef, \%queries);
        $qm->setUiManager( "veritas-cluster-status" );
        $qm->processQueriesUsingServer($debug, $email, $sendEmail, $sendPage, $monserver);

    } # products

}

sub filesForDB {
    my $me = shift;
    my $dbc = shift;
    my $queryRef = shift;
    my @dbFilesReturnedFromQuery;
    my @allDBFiles;

    eval {
        @dbFilesReturnedFromQuery = ariba::DBA::SampleSQLQueries::executeSQLQuery($me, "getVolume", $dbc);
    };
    if ( $@ ) {
        my $msg = "Connection to " . $dbc->host() . " failed: $@";
        $$queryRef->{'warn'} = 1;
        $$queryRef->{'perl'} = "return '$msg'";
        return ();
    }

    unless ( scalar @dbFilesReturnedFromQuery ) {
        my $msg = "Query of Oracle data files from " . $dbc->host() . " returned no rows";
        $$queryRef->{'warn'} = 1;
        $$queryRef->{'perl'} = "return '$msg'";
        return ();
    }

    push(@allDBFiles, @dbFilesReturnedFromQuery);

    @dbFilesReturnedFromQuery = ariba::DBA::SampleSQLQueries::executeSQLQuery($me, "logLocations", $dbc);
    unless ( scalar @dbFilesReturnedFromQuery ) {
        my $msg = "Query of Oracle log files from " . $dbc->host() . " returned no rows";
        $$queryRef->{'warn'} = 1;
        $$queryRef->{'perl'} = "return '$msg'";
        return ()
    }
    push(@allDBFiles, @dbFilesReturnedFromQuery);

    return @allDBFiles;
}

main(@ARGV);
