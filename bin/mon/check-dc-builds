#!/usr/local/bin/perl -w

# $Id: //ariba/services/monitor/bin/mon/check-dc-builds#4 $
#
# Look at and compare the currently deployed builds in 
#   /tmp/<service>/mon/current-builds.log generated by generate-dc-builds-list 
#   Currenlty we are only comparing SNV PROD and EU PRODEU
#

use strict;
use FindBin;
use lib "$FindBin::Bin/../../lib";

use ariba::monitor::Query;
use ariba::monitor::QueryManager;
use ariba::Ops::Constants;
use ariba::rc::CipherStore;
use ariba::rc::Globals;
use ariba::rc::InstalledProduct;
use ariba::rc::Passwords;
use ariba::rc::Utils;

my $debug = 0;

sub usage {
    my $error = shift; 

    print <<USAGE;
Usage: $0 [-e|-p|-d|-h]

    -e    Enables sending of email for monitor query.
    -p    Enables sending of pages for monitor query.
    -d    Turns on debug mode. 
    -h    Shows this help.

USAGE

    print "(error) $error\n" if ($error);

    exit();
}

sub main {
    my $sendEmail = 0;
    my $sendPage = 0;

    while (my $arg = shift) {
        if ($arg =~ /^-h$/o) { usage();         next; }
        if ($arg =~ /^-d$/o) { $debug++;        next; }
        if ($arg =~ /^-e$/o) { $sendEmail = 1;  next; }
        if ($arg =~ /^-p$/o) { $sendPage = 1;   next; }

        usage("Invalid argument: $arg");
    }

    my $me = ariba::rc::InstalledProduct->new();
    my $service = $me->service();

    my ($product, $build);
    my @prodServices = ariba::Ops::ServiceController::productionServicesOnly();

    my ($builds1, $builds2) = readBuildFile(@prodServices);

    #
    # loop through builds1 keys, and compare key-values with builds2
    # if there are any mismatches, then this will get reported in monitoring
    #
    my ($build1, $build2);
    my %queries;
    my $services = join(',', @prodServices);

    for my $product ( keys %$builds1 ) {
        my $results;
        $build1 = $builds1->{$product};
        next unless ($build2 = $builds2->{$product});

        $results = $build1 . " vs " . $build2 unless ($build1 eq $build2);

        $queries{"Mismtached builds for $product in $services"} = {
            crit    => "answer ne ''",
            perl    => sub { return $results; },
            description => 'Mismatched builds between datacenters', 
        };
    }

    my $email = $me->default('notify.email');

    my $qm = ariba::monitor::QueryManager->newWithDetails('datacenter-builds', $me->name(), $me->service(), $me->customer(), \%queries);
    $qm->processQueries($debug, $email, $sendEmail, $sendPage);
}

sub readBuildFile {
    my @prodServices = @_;
    my (%builds1, %builds2);
    my ($product, $build);
    my $localTempfile = "/tmp/current-builds.log";

    #
    # Currenlty this is only setup for PROD, PRODEU service comparison
    #   we should update this to use a array of hashes later if we ever
    #   need to compare more than 2 services, and also update if this will be used
    #   for non SNV PROD or EU PRODEU services
    #
    for my $service (@prodServices) {
        my $buildsFile = "/tmp/$service/mon/current-builds.log";
        #
        #    For PRODEU build file, mon needs to ssh and read the current-builds.log file on the PRODEU monserver
        #
        if (ariba::Ops::ServiceController::isProductionEUServiceOnly($service)) {
            print "builds file for $service in $localTempfile\n" if $debug;

            #
            # login as monprodeu user, but use monprodeu password since this query is run
            # from the prod server and we can only get PROD passwords from the cipherstore,
            # PROD and PRODEU passwords are the same as of now
            #
            my $me = ariba::rc::InstalledProduct->new();
            my $euMonServer = ariba::Ops::Constants->euMonServerPrimary();
            my $monUser = "mon" . $service;
            my $user = ariba::rc::Globals::deploymentUser($me->name(), $me->service());
            my $cipherStore = ariba::rc::CipherStore->new($me->service());
            my $password = $cipherStore->valueForName($user);

            unless ( $password ) {
                print "Failed to get password for $user\n" if ( $debug );
                exit();
            }

            #
            # scp current-builds.log file from secondary datacenter and copy over
            #   to local /tmp 
            # 
            my $command = "scp -q $monUser\@$euMonServer:$buildsFile $localTempfile";
            print "running command $command\n" if $debug;
            ariba::rc::Utils::sshCover($command, $password, undef);

            open(LOG, "<", $localTempfile) || die "Could not open $localTempfile, $!\n";
            while (my $line = <LOG>) {
                chomp($line);
                ($product, $build) = split(',', $line);
                $builds2{$product} = $build;
            } 
            close(LOG);
        }

        if (ariba::Ops::ServiceController::isProductionUSServiceOnly($service)) {
            print "builds file for $service in $buildsFile\n" if $debug;

            open(LOG2, "<", $buildsFile) || die "Could not open $buildsFile, $!\n";
            while (my $line2 = <LOG2>) {
                chomp($line2);
                ($product, $build) = split(',', $line2);
                $builds1{$product} = $build;
            } 
            close(LOG2);
        }
    } 
    return (\%builds1, \%builds2);;
}

main(@ARGV);

__END__
