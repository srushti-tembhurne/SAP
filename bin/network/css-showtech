#!/usr/local/bin/perl -w

# $Id: $

use strict;
use FindBin;
use lib "$FindBin::Bin/../../lib";

use ariba::Ops::NetworkUtils;
use ariba::Ops::NetworkDeviceManager;
use ariba::monitor::QueryManager;
use ariba::Ops::Machine;
use ariba::Ops::NetworkUtils;
use ariba::Ops::ProductAPIExtensions;
use ariba::rc::InstalledProduct;
use ariba::SNMP::Session;

my $debug = 0;

sub main {

	my $hostname = ();
	my $ipForFlows = ();

	while (my $arg = shift(@ARGV)) {
		if ($arg =~ /^-d/o) { $debug     = 1; };
		if ($arg =~ /^-host/oi) { $hostname = shift(@ARGV); };
		if ($arg =~ /^-vip/oi) { $ipForFlows = ariba::Ops::NetworkUtils::hostToAddr(shift(@ARGV)); };
	}

	unless ($hostname && ($ipForFlows =~ /\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b/)){
		print "requires a fully qualiffied hostname. e.g.:\n";
		print "./css-showtech -host ccss11501-n1a-1.snv.ariba.com -vip service.ariba.com\n";
		exit;
	}

	print "checking flows for $ipForFlows on css $hostname\n";

	my $me    = ariba::rc::InstalledProduct->new();

	my $cipherStore    = ariba::rc::CipherStore->new($me->service());
	my $accessPasswordFromCS = $cipherStore->valueForName('networkAccess');
	my $enablePasswordFromCS = $cipherStore->valueForName('networkEnable');
	my $accessPassword = $accessPasswordFromCS;
	my $enablePassword = $enablePasswordFromCS;

	if (!$accessPasswordFromCS) {
		$accessPasswordFromCS = getPasswordFromStdin('Network Access');
	}

	if (!$enablePasswordFromCS) {
		$enablePasswordFromCS = getPasswordFromStdin('Network Enable');
	}

	my %match = (
		'os' => 'css',
		'status'   => 'inservice',
		'hostname' => $hostname,
	);

	my @machines = ariba::Ops::Machine->machinesWithProperties(%match);

	for my $machine (@machines) {

		my $css = ariba::Ops::NetworkDeviceManager->newFromMachine($machine) || next;
		my $cssName	= $css->hostname();

		my ($sec, $min, $hour) = (localtime(time()))[0,1,2,3];
		my $debugDump = "/var/tmp/$hostname.debug.dump_" . $hour . ":" . $min . ":" . $sec;

		$css->setAccessPassword($enablePassword);
		$css->setEnablePassword($enablePassword);
		$css->setDebug($debug) if $debug > 1;

		$css->connect() || do {
			print "Failed to log in to host $cssName, check password\n";
			next;
		};

		my $cssDebugString = $css->getFlowInfo($ipForFlows);
		open (CSSDEBUGFLOWS, ">$debugDump") or die $!;
		print CSSDEBUGFLOWS $cssDebugString . "\n";
		close CSSDEBUGFLOWS;

		print "\nlogs can be found at: $debugDump\n";
	}
}

main();
