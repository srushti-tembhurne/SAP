#!/usr/local/bin/perl -w

# $Id: //ariba/services/monitor/bin/network/device-change-passwords#4 $
#
# Grab the running config from network devices, and compare to what we have in
# perforce - send out diffs if required.

use strict;
use FindBin;
use lib "$FindBin::Bin/../../lib";

use ariba::Ops::NetworkDeviceManager;
use ariba::Ops::Constants;
use ariba::Ops::Machine;
use ariba::Ops::ProductAPIExtensions;
use ariba::rc::CipherStore;
use ariba::rc::InstalledProduct;
use Term::ReadKey;

my $debug = 0;


sub promptPassword {
	my $pwdType = shift;
	my $old = shift; 

	my $newPassword;
	my $checkNewPassword;

	my $kind = ($old ? "*CURRENT*" : "*NEW*");

	# Get the password(s) from the user.
	ReadMode('noecho');

	do {

		print "\nEnter $kind network $pwdType password: ";
		chomp($newPassword = ReadLine(0));
	
		print "\nRe-enter $kind network $pwdType password: ";
		chomp($checkNewPassword = ReadLine(0));

		
		if ($checkNewPassword ne $newPassword) {
			print "\nThis does not match.\n";
		}

	} while ($checkNewPassword ne $newPassword);


	ReadMode('normal');
	
	return $newPassword;

}

sub changePasswordsFromMachineAndPasswords {

	my $machine = shift;
	my $accessPassword = shift;
	my $enablePassword = shift;
	my $newAccessPassword = shift;
	my $newEnablePassword = shift;

	my $networkDevice = ariba::Ops::NetworkDeviceManager->newFromMachine($machine) || return 0;
	my $hostname      = $machine->hostname();

	# Can't login to the failover device.
	# return success here so that we don't get false errors/rollbacks
	return 1 if $hostname =~ /(?:ldir|pix|asa)\S+?\-2\./;

	# These devices only have one password
	if ($machine->os() eq 'css' || $machine->hardwareVendor() eq 'cyclades') {

		$networkDevice->setAccessPassword($enablePassword);

	} else {

		$networkDevice->setAccessPassword($accessPassword);
	}

	$networkDevice->setEnablePassword($enablePassword);
	$networkDevice->setDebug($debug);

	print "Working on: $hostname\n";

	# login and grab the config
	$networkDevice->connect() || do {
		print "Failed to log in to host $hostname, check password\n";
		$networkDevice->disconnect();
		return 0;
	};

	unless ($networkDevice->can('changePassword')) {

		printf("A changePassword() method doesn't appear to be defined for: %s, with OS: %s\n",
			$hostname, $networkDevice->machine()->os()
		);

		return 0;
	}

			
	my $resultChange = $networkDevice->changePassword($newAccessPassword, $newEnablePassword) unless ($debug);
	if ($resultChange) {

		print "\tPassword(s) for $hostname changed ok!\n";

	} else {

		print "Error: There was a problem changing password(s) for $hostname!\n";
		print "Please run again with more debugging turned on.\n";
	}

	print "\n";

	$networkDevice->disconnect();
	return $resultChange;
}


sub main {

	my $sendEmail = 0;
	my $sendPage  = 0;
	my $rollbackOnError = 0;
	my $askForOldPass = 0;
	my $stopOnError = 0;

	while (my $arg = shift @ARGV) {
		if ($arg =~ /^-e/o) { $sendEmail = 1; }
		if ($arg =~ /^-p/o) { $sendPage  = 1; }
		if ($arg =~ /^-d/o) { $debug++; }
		if ($arg =~ /^-h/i) { usage(); next; }
		if ($arg =~ /^-rollback/i) { $rollbackOnError = 1; $stopOnError = 1; next; }
		if ($arg =~ /^-askforoldpass/i) { $askForOldPass = 1; next; }
	}

	my $me = ariba::rc::InstalledProduct->new();

	my $cipherStore    = ariba::rc::CipherStore->new($me->service());
	my $accessPassword = $cipherStore->valueForName('networkAccess');
	my $enablePassword = $cipherStore->valueForName('networkEnable');

	if ($askForOldPass ){
		$accessPassword = promptPassword("access", 1);
		$enablePassword = promptPassword("enable", 1);
	}

	if (!$accessPassword || !$enablePassword) {
		print "Couldn't get either the access or enable passwords from shared memory!\n";
		exit;
	}


	
	my $newAccessPassword = promptPassword("access");
	
	my $newEnablePassword = promptPassword("enable");
	
		
	
	print "\n\n";
	my @machinesList;
	for my $datacenter (ariba::Ops::ProductAPIExtensions::datacentersForProducts($me)) {

		my %match   = (
			'status'     => 'inservice',
			'datacenter' => $datacenter,
		);

		push(@machinesList, ariba::Ops::Machine->machinesWithProperties(%match)); 

	}

	my @listChangesOk;
	my $success = 1;
	for my $machine (@machinesList) {

		next unless $machine->deviceType() eq 'net';
		next if $machine->hardwareVendor() eq 'netscreen';

		my $changeOK = changePasswordsFromMachineAndPasswords ($machine,
																$accessPassword, $enablePassword,
																$newAccessPassword, $newEnablePassword);

		if ($changeOK) {
		
			push (@listChangesOk, $machine);

		} else {
			$success = 0;

			if ($rollbackOnError) {
				print ("Error : Going to put the passwords back\n");
				foreach my $rollbackMachine (@listChangesOk) {

					changePasswordsFromMachineAndPasswords ($rollbackMachine,
															$newAccessPassword, $newEnablePassword,
															$accessPassword, $enablePassword);
				
				}
			}
			last if $stopOnError;
		}
	}

	if ($success) {
		printf("\nNOTE - You must now update the encrypted passwords in //ariba/services/operations/passwords/%s\n", $me->service());
		printf("For \"networkAccess\" and \"networkEnable\"\n");
		print "This is NOT an optional step.\n";
	}
}

main();

sub usage {
	print "This script goes through all network device in the datacenter it is run and\n",
		"changes the access and enable passwords accordingly.\n\n",
		"Usage: $0 [-rollback] [-askforpass]\n",
		"  -rollback    will rollback to the current passwords if it encounters an error\n",
		"  -askforpass  will ask for the current passwords instead of getting them from\n",
		"               cipher store, this is useful for changing passwords back if some\n",
		"               machines have the new passwords and some the old\n",
		"\n",
		"With no args this script will go through each network device and change the passwords\n",
		"serially, it will report errors but keep going.  With the -rollback option, it will\n",
		"stop at the first error and revert all changed devices to the current passwords\n";

	exit(1);
}


__END__
