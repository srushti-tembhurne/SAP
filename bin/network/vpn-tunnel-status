#!/usr/local/bin/perl -w

# $Id$

use strict;
use File::Basename;
use FindBin;
use lib "$FindBin::Bin/../../lib";

use ariba::Ops::NetworkDeviceManager;
use ariba::monitor::QueryManager;
use ariba::monitor::StatusPage;
use ariba::Ops::Machine;
use ariba::Ops::NetworkUtils;
use ariba::Ops::ProductAPIExtensions;
use ariba::rc::InstalledProduct;
use dmail::LockLib;

my $debug    = 0;
my $lockFile = "/tmp/" . basename($0);

sub main {
    my $sendEmail = 0;
    my $sendPage  = 0;

    while ( my $arg = shift(@ARGV) ) {
        if ( $arg =~ /^-e/o ) { $sendEmail = 1; }
        if ( $arg =~ /^-p/o ) { $sendPage  = 1; }
        if ( $arg =~ /^-d/o ) { $debug     = 1; }
    }

    die "can't grab lock\n" unless dmail::LockLib::requestlock( $lockFile, 5 );
    my $me    = ariba::rc::InstalledProduct->new();
    my $email = $me->default('notify.email');

    for my $datacenter (
        ariba::Ops::ProductAPIExtensions::datacentersForProducts($me) )
    {
        my %queries = ();

        # Per device method
        checkFirewallVpnStatus( \%queries, $datacenter );

        if (%queries) {
            my $pn = ariba::monitor::StatusPage::fakeProductNameForDatacenter(
                $datacenter);
            my $qm = ariba::monitor::QueryManager->newWithDetails(
                'Network VPN Tunnel',
                $pn, $me->service(), $me->customer(), \%queries );
            $qm->processQueriesUsingServer( $debug, $email, $sendEmail,
                $sendPage );
        }
    }
    dmail::LockLib::releaselock($lockFile);
}

sub checkFirewallVpnStatus {
    my $queriesRef = shift;
    my $datacenter = shift;

    my %matchDatacenter = (
        'datacenter'           => $datacenter,
        'os'                   => 'panos',
        'status'               => 'inservice',
        'monitoringDatacenter' => '',
    );

    my %matchMonitoringDatacenter = (
        'os'                   => 'panos',
        'status'               => 'inservice',
        'monitoringDatacenter' => $datacenter,
    );

    my @networkDevices =
      ariba::Ops::Machine->machinesWithProperties(%matchDatacenter);
    @networkDevices = (
        @networkDevices,
        ariba::Ops::Machine->machinesWithProperties(%matchMonitoringDatacenter)
    );

    for my $networkDevice (@networkDevices) {
        my $deviceName = $networkDevice->hostname();

        # Create a networkDevice instance, and get vpn statuses
        my $nd =
          ariba::Ops::NetworkDeviceManager->newFromMachine($networkDevice);

        unless ($nd) {
            print "[DEBUG] driver init failed for $deviceName: '$@', skipping...\n" if $debug;
            $@ = undef;    # clear the error
            next;
        }

        my $vpnStatus = $nd->getVpnTunnelStatus();
        my $error = $nd->error();
        if ($error) {
            $queriesRef->{"$deviceName"} = {
                uiHint    => 'firewall',
                crit      => "1",
                perl      => "return qq(status check error: $error)",
                inf_field => "vpnStatusCheck",
                inf_tags => qq|datacenter="$datacenter",deviceName="$deviceName",uiHint="firewall"|,
            };
        }
        else {
            $queriesRef->{"$deviceName"} = {
                uiHint    => 'firewall',
                crit      => "0",
                perl      => "return qq(status check successful)",
                inf_field => "vpnStatusCheck",
                inf_tags => qq|datacenter="$datacenter",deviceName="$deviceName",uiHint="firewall"|,
            };
        }

        foreach my $tunnel ( keys %$vpnStatus ) {
            my $status = $vpnStatus->{$tunnel};
            $queriesRef->{"$deviceName $tunnel"} = {
                uiHint    => "firewall",
                crit      => " $status !~ /up/i ",
                perl      => "return qq($status)",
                inf_field => "vpnStatus",
                inf_tags => qq|datacenter="$datacenter",deviceName="$deviceName",uiHint="firewall"|,
            };
        }
    }

}

main();
