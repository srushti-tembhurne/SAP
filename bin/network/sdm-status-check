#!/usr/local/bin/perl -w

# $Id: //ariba/services/monitor/bin/network/sdm-status-check#10 $

use strict;
use File::Basename;
use FindBin;
use lib "$FindBin::Bin/../../lib";

use ariba::Ops::NetworkDeviceManager;
use ariba::monitor::QueryManager;
use ariba::monitor::StatusPage;
use ariba::Ops::Machine;
use ariba::Ops::ProductAPIExtensions;
use ariba::rc::CipherStore;
use ariba::rc::InstalledProduct;
use dmail::LockLib;

my $lockFile = "/tmp/" . basename($0);

sub main {
	my $sendEmail = 0;
	my $sendPage  = 0;
	my $debug     = 0;

	while (my $arg = shift(@ARGV)) {
		if ($arg =~ /^-e/o) { $sendEmail = 1; };
		if ($arg =~ /^-p/o) { $sendPage  = 1; };
		if ($arg =~ /^-d/o) { $debug     = 1; };
	}

	die "can't grab lock\n" unless dmail::LockLib::requestlock($lockFile, 5);

	my $me    = ariba::rc::InstalledProduct->new();
	my $email = $me->default('notify.email');

	my $cipherStore    = ariba::rc::CipherStore->new($me->service());
	my $accessPassword = $cipherStore->valueForName('networkAccess');
	my $enablePassword = $cipherStore->valueForName('networkEnable');

	for my $datacenter ( ariba::Ops::ProductAPIExtensions::datacentersForProducts($me) ) {

		my %queries = ();

		my %matchDatacenter = (
			'datacenter' => $datacenter,
			'status'           => 'inservice',
			'hardwareType' => '3750|3750e-s|3750e-e|3750g',
			'monitoringDatacenter' => '',
		);

		my %matchMonitoringDatacenter = (
			'status'           => 'inservice',
			'hardwareType' => '3750|3750e-s|3750e-e|3750g',
			'monitoringDatacenter' => $datacenter,
		);

		my @machines = ariba::Ops::Machine->machinesWithProperties(%matchDatacenter);
		@machines = (@machines , ariba::Ops::Machine->machinesWithProperties(%matchMonitoringDatacenter));

		foreach my $machine (@machines) {

			my $hostname = $machine->hostname();

			# Create a networkDevice
			my $networkDevice = ariba::Ops::NetworkDeviceManager->newFromMachine($machine);
			unless($networkDevice) {
				print "[DEBUG] driver init failed for $hostname: '$@', skipping...\n" if $debug;
				$@ = undef; # clear the error
				next;
			}

			# Set passwords
			$networkDevice->setAccessPassword($accessPassword);
			$networkDevice->setEnablePassword($enablePassword);
			$networkDevice->setDebug($debug) if $debug > 1;			

			# login and check sdm status
			$networkDevice->connect() || do {
				print "Failed to log in to host $hostname, check password\n";
				next;
			};

			my $sdmstatus = $networkDevice->getSDMStatus();

			print "$hostname\n" if $debug;
			print "$sdmstatus\n\n" if $debug;

			my $crit;
			if(grep (/router/, $machine->providesServices())) {
				$crit = "answer !~ /routing/ && previousAnswer !~ /routing/";
			} elsif(grep(/switch/, $machine->providesServices())) {
				$crit = "answer !~ /default/ && previousAnswer !~ /default/";
			}

			$queries{"$hostname SDM status"} = {
				perl => sub { return $sdmstatus; },
				crit => $crit,
			};

		}

		my $pn = ariba::monitor::StatusPage::fakeProductNameForDatacenter($datacenter);
		my $qm = ariba::monitor::QueryManager->newWithDetails(
			'Network-SDM-Status', $pn, $me->service(), $me->customer(), \%queries
		);

		$qm->processQueriesUsingServer($debug, $email, $sendEmail, $sendPage);
	}	
	dmail::LockLib::releaselock($lockFile);
}

main();
