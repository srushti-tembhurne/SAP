#!/usr/local/bin/perl -w

# $Id: //ariba/services/monitor/bin/network/bgp-password-check#4 $
#
# Grab the running config from network devices, and compare to what we have in
# perforce - send out diffs if required.

use strict;
use File::Basename;
use FindBin;
use lib "$FindBin::Bin/../../lib";

use ariba::Ops::NetworkDeviceManager;
use ariba::monitor::QueryManager;
use ariba::monitor::StatusPage;
use ariba::Ops::Constants;
use ariba::Ops::Machine;
use ariba::Ops::ProductAPIExtensions;
use ariba::rc::CipherStore;
use ariba::rc::InstalledProduct;
use Digest::MD5 qw(md5_hex);
use dmail::LockLib;

my $ONE_DAY    = 60 * 60 * 24;
my $ONE_YEAR   = $ONE_DAY * 365;

my $debug      = 0;
my $lockFile = "/tmp/" . basename($0);

sub main {

	my $sendEmail = 0;
	my $sendPage  = 0;

	while (my $arg = shift @ARGV) {
		if ($arg =~ /^-e/o) { $sendEmail = 1; };
		if ($arg =~ /^-p/o) { $sendPage  = 1; };
		if ($arg =~ /^-d/o) { $debug     = 1; };
	}

	die "can't grab lock\n" unless dmail::LockLib::requestlock($lockFile, 5);

	my $me = ariba::rc::InstalledProduct->new();

	my $email          = $me->default('notify.email');

	# set a default one year from now
	my $now		   = time();
	my $defaultExpire  = $now + $ONE_YEAR;

	my $cipherStore    = ariba::rc::CipherStore->new($me->service());
	my $accessPassword = $cipherStore->valueForName('networkAccess');
	my $enablePassword = $cipherStore->valueForName('networkEnable');

	my ($newAccessPassword, $newEnablePassword);

	if (!$accessPassword || !$enablePassword) {
		print "Couldn't get either the access or enable passwords from shared memory!\n";
		exit;
	}

	for my $datacenter (ariba::Ops::ProductAPIExtensions::datacentersForProducts($me)) {

		my %queries = ();
		my %match   = (
			'status'           => 'inservice',
			'providesServices' => 'router',
			'datacenter'       => $datacenter,
		);

		for my $machine (ariba::Ops::Machine->machinesWithProperties(%match)) {

			my $networkDevice = ariba::Ops::NetworkDeviceManager->newFromMachine($machine) || next;
			$networkDevice->snmp()->setTimeout(30);
			my $hostname      = $machine->hostname();

			# If this router doesn't have any peers, skip it.
			my $peers         = $networkDevice->snmp()->bulkWalkOids('bgpPeerRemoteAddr');

			next unless keys %$peers;

			# Set passwords so we can get the running config.
			$networkDevice->setAccessPassword($accessPassword);
			$networkDevice->setEnablePassword($enablePassword);
			$networkDevice->setDebug($debug) if $debug > 1;

			# login and grab the config
			$networkDevice->connect() || do {
				print "Failed to log in to host $hostname, check password\n";
				next;
			};

			my $config = $networkDevice->getConfig();

			for my $line (split(/\n/, $config)) {

				# find the peer password lines
				next unless $line =~ /neighbor\s+([\d\.]+)\s+password\s+\d\s+(\S+)/;

				my $peer = $1;
				my $pass = $2;

				# We don't want to store the real password
				# (although it's encrypted)
				my $md5  = md5_hex($pass);

				$queries{"$hostname BGP password for peer $peer needs to be changed in"} = {
					noRowCount => 1,
					format => '%d days',

					info => "answer > 30",
					warn => "answer <= 30 && answer > 0",
					crit => "answer <= 0",

					perl => "return '$md5:$defaultExpire'",

					processAnswer => sub { main::processAnswerForFingerprintChange($now) },
				};
			}
		}

		my $pn = ariba::monitor::StatusPage::fakeProductNameForDatacenter($datacenter);

		my $qm = ariba::monitor::QueryManager->newWithDetails(
			'network-bgp', $pn, $me->service(), $me->customer(), \%queries
		);

		$qm->processQueriesUsingServer($debug, $email, $sendEmail, $sendPage);
	}
	dmail::LockLib::releaselock($lockFile);
}

# This is rather sick - We can create our own custome field/method to store
# arbritrary data that needs to persist.
sub processAnswerForFingerprintChange {
	my $now   = shift;

	my $query = $ariba::monitor::Query::_ourGlobalQuerySelf;

	my ($currentMD5,  $currentExpire)  = split /:/, $query->results();
	my ($previousMD5, $previousExpire) = split /:/, $query->bgpPasswordExpireFingerprint();

	if ($debug) {

		printf("Current  MD5: %s Current  Expire: %s\n", $currentMD5, scalar localtime($currentExpire));

		printf("Previous MD5: %s Previous Expire: %s\n", 
			$previousMD5 || 'NONE!',
			scalar localtime($currentExpire || time()),
		);
		print "\n";
	}

	# First run for this query?
	# We have no previously stored data
	#
	# or
	#
	# Passwords have changed - reset the expire time 
	if ((!$previousMD5 || !$previousExpire) || ($currentMD5 ne $previousMD5)) {

		$query->setBgpPasswordExpireFingerprint( $query->results() );

		return ($currentExpire - $now) / $ONE_DAY;
	}

	# Password has not changed
	if ($currentMD5 && $previousMD5 && $currentMD5 eq $previousMD5) {

		return ($previousExpire - $now) / $ONE_DAY;
	}

	return -999;
}

main();

__END__
