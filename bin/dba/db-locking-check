#!/usr/local/bin/perl -w
# $Id: //ariba/services/monitor/bin/dba/db-locking-check
use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../../lib";

use ariba::rc::InstalledProduct;
use ariba::monitor::Query;
use ariba::monitor::QueryManager;
use ariba::monitor::OutageSchedule;
use ariba::Ops::NetworkUtils;
use ariba::Ops::ProductAPIExtensions;
use ariba::Ops::DBConnection;

my $debug = 0;

sub main {
    my $sendEmail = 0;
    my $sendPage  = 0;
    my $productName;

    while (my $arg = shift(@ARGV)) {
        print STDERR "parsing arg $arg\n" if $debug;
        if ($arg =~ m/^-h$/o) { usage(); next; }
        if ($arg =~ m/^-d$/o) { $debug=1; next; }
        if ($arg =~ m/^-e$/o) { $sendEmail=1; next; };
        if ($arg =~ m/^-p$/o) { $sendPage=1; next; };
        if ($arg =~ m/^-prod$/o) { $productName = shift(@ARGV); next; };
        usage("Unknown arg: $arg");
    }
    my $me            = ariba::rc::InstalledProduct->new();
    my $hostname      = ariba::Ops::NetworkUtils::hostname();
    my $cluster       = $me->currentCluster();
    my $email         = $me->default('notify.email');
    my $service = $me->service();
    my @products = ariba::rc::InstalledProduct->installedProductsList($service, $productName);

    foreach my $product (@products) {
        my @dbconnections = ariba::Ops::DBConnection->connectionsFromProducts($product);
        for my $dbc (ariba::Ops::DBConnection->uniqueConnectionsByHostAndSid(@dbconnections)) {
            next if $dbc->isDR();   # skip DRs

            my $type     = $dbc->type();
            next if $type =~ /star/;

            my $product  = $dbc->product();
            my $prodName = $product->name();
            my $service  = $product->service();
            my $virtualHost = $dbc->host();
            my $activeHost  = $product->activeHostForVirtualHostInCluster($virtualHost, $cluster);
            next unless $activeHost;

            my $instance = uc($dbc->sid());
            next if $instance =~ /HANA/;        # skip hana SIDs
            next if $instance =~ /(MON|RMAN)/;  # skip MON and RMAN SIDs
            next if $activeHost =~ /hana/i;     # skip hana Hosts
            my $pid = fork();
            next if ($pid); # If successful fork, parent goes to next product, child checks the SID.

            my %queries = ();

            my $time_interval = 30;     # we want to have different time intervals for TX and SV sids
            $time_interval = 180 if ($dbc->isStarSchema());

            $queries{" [$instance] on $activeHost locking"} = {
                info => 'answer = 0',
                sql => "select db_wait_monitor($time_interval,20,360) from dual",
                format => "<html>%s<br></td><td>queryError</html>",
                timeout => 400,
                recordMaxResults => 110000,
                uiHint => 'Locking',
                description => 'This query detects locking on the database. Call DBA immediately if paged.',
                correctiveActions => [
                    Ops => 'If crit, escalate to DBA',
                ],
            };


            $queries{" [$instance] on $activeHost no of blocking"} = {
                info => 'numrows = 0',
                crit => "numrows > 0",
                sql => q(select B.USERNAME ||' ('||B.SID||','||B.SERIAL#||','||B.CLIENT_IDENTIFIER||','||B.SQL_ID||','||B.PREV_SQL_ID||') is Currently '||B.STATUS||' for last '||W.LAST_CALL_ET||' Sec and it''s BLOCKING user '|| W.USERNAME|| ' ('||W.SID||','||W.SERIAL#||','||W.CLIENT_IDENTIFIER||','||W.sql_id||','||W.prev_sql_id||')' from (select SID,SERIAL#,USERNAME,STATUS,BLOCKING_SESSION,LAST_CALL_ET,sql_id,prev_sql_id,CLIENT_IDENTIFIER from v$session where BLOCKING_SESSION >0 and type <> 'BACKGROUND' and event like '%enq%' and last_call_et > 1800) W, (select SID,SERIAL#,USERNAME,STATUS,LAST_CALL_ET,sql_id,prev_sql_id,CLIENT_IDENTIFIER from v$session where type <> 'BACKGROUND' and sid in (select blocking_session from v$session where blocking_session >0 and status='INACTIVE')) B where W.BLOCKING_SESSION=B.SID union select B.USERNAME ||' ('||B.SID||','||B.SERIAL#||','||B.CLIENT_IDENTIFIER||','||B.SQL_ID||','||B.PREV_SQL_ID||') is Currently '||B.STATUS||' for last '||W.LAST_CALL_ET||' Sec and it''s BLOCKING user '|| W.USERNAME|| ' ('||W.SID||','||W.SERIAL#||','||W.CLIENT_IDENTIFIER||','||W.sql_id||','||W.prev_sql_id||')' from (select SID,SERIAL#,USERNAME,STATUS,BLOCKING_SESSION,LAST_CALL_ET,sql_id,prev_sql_id,CLIENT_IDENTIFIER from v$session where BLOCKING_SESSION >0 and type <> 'BACKGROUND' and last_call_et > 1200 and event like '%enq%') W, (select SID,SERIAL#,USERNAME,STATUS,LAST_CALL_ET,sql_id,prev_sql_id,CLIENT_IDENTIFIER from v$session where sid in (select blocking_session from v$session where blocking_session >0 group by blocking_session having count(*) > 20) and type <> 'BACKGROUND') B where W.BLOCKING_SESSION=B.SID),
                format => "<html>%s<br></td><td>queryError</html>",

                timeout => 400,
                recordMaxResults => 110000,
                uiHint => 'Locking',
                description => 'This query detects number of waiting/blocking  on the database. Call DBA immediately if paged.',
                correctiveActions => [
                    Ops => 'If crit, escalate to DBA',
                ],
            };

            my $qm = ariba::monitor::QueryManager->newWithDetails(
                "dba", $product->name(), $product->service(), undef, \%queries
            );

            my $user = "sys";
            my $pass = $me->default("dbainfo.$user.password");

            $qm->setSQLConnectInfo($user, $pass, $instance, $activeHost);
            $qm->processQueriesUsingServer($debug, $email, $sendEmail, $sendPage);
            return;
        }
    }       
}

main();

__END__

