#!/usr/local/bin/perl -w

#Jira-Id: https://product-jira.ariba.com/browse/HOA-2440
# $Id: //ariba/services/monitor/etc/monitor-query-template#6 $

use strict;
use FindBin;
use lib "$FindBin::Bin/../../lib";

use ariba::monitor::Query;
use ariba::monitor::QueryManager;
use ariba::rc::InstalledProduct;
use ariba::Ops::ProductAPIExtensions;

my $debug = 0;

sub usage {
    my $error = shift; 

    print <<USAGE;
Usage: $0 [-e|-p|-d|-h]

    -e    Enables sending of email for monitor query.
    -p    Enables sending of pages for monitor query.
    -d    Turns on debug mode. 
    -h    Shows this help.

USAGE

    print "(error) $error\n" if ($error);

    exit();
}

sub main {
    my $sendEmail = 0;
    my $sendPage = 0;

    while (my $arg = shift) {
        if ($arg =~ /^-h$/o) { usage();         next; }
        if ($arg =~ /^-d$/o) { $debug++;        next; }
        if ($arg =~ /^-e$/o) { $sendEmail = 1;  next; }
        if ($arg =~ /^-p$/o) { $sendPage = 1;   next; }

        usage("Invalid argument: $arg");
    }

    my $mon = ariba::rc::InstalledProduct->new();
    my $me = ariba::rc::InstalledProduct->new('community', $mon->service());
    my %queries;

    $queries{'Notification events queue'} = {
        sql   => "SELECT count(*) as notification_events_queue FROM noti_events WHERE created < ((SYSDATE - TO_DATE('01-JAN-1970','DD-MON-YYYY')) * (86400)) - (30*60) and status = 0",
        warn    => "answer >= 1",
	severity => 2,
        info    => "answer == 0",
        description => 'Check Notification events queue',
        correctiveActions => [
            Ops => 'check if there is crontab entry for processing notifications events queue for community',
	    Engr => 'Check if there are any errors in syslog'
        ],
    };

    $queries{'Notification queue'} = {
        sql   => "SELECT count(*) as notification_queue FROM queue WHERE created < ((SYSDATE - TO_DATE('01-JAN-1970','DD-MON-YYYY')) * (86400)) - (30*60) and name = 'ariba_notifications_queue'",
        warn    => "answer >= 1",
	severity => 2,
        info    => "answer == 0",
        description => 'Check Notification queue',
        correctiveActions => [
            Ops => 'check if there is crontab entry for processing notifications queue for community',
        ],
    };

    my $email = $me->default('notify.email');
    $queries{'influx_details'} = { measurement => 'community_notification_status'};
    my $qm = ariba::monitor::QueryManager->newWithDetails('notifications-status', $me->name(), $me->service(), $me->customer(), \%queries);
    $qm->setSQLConnectInfo(ariba::Ops::ProductAPIExtensions::connectInfoForOracleClient($me));
    $qm->processQueries($debug, $email, $sendEmail, $sendPage);
}

main(@ARGV);

__END__
