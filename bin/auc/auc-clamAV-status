#!/usr/local/bin/perl

###############################################################################
# $Id: //ariba/services/monitor/bin/auc/auc-clamAV-status#1 $
# $HeadURL:$
#
# Copyright (c) 2016 SAP Ariba
#
# auc-clamAV-status - Monitor clamAV(virus scan)
#

###############################################################################

=head1 NAME

auc-clamAV-status - Monitor clamAV(virus scan)

=head1 SYNOPSIS

auc-clamAV-status [options]

=head1 OPTIONS

=over

=item B<-help|-h>

Print this usage information and exit.

=item B<-debug|-d>

Enable debugging output / dryrun

=item B<-e>

Enable sending of emails

=item B<-p>

Enable sending of pages

=back

=head1 DESCRIPTION

C<auc-clamAV-status> - Monitor the status of clamAV(virus scan)

=cut

=head1 AUTHOR

Narenthiran Rajaram<< narenthiran.rajaram@sap.com >>

=head1 LICENSE

Copyright 2016 SAP Ariba

=cut


use strict;
use FindBin;
use lib "$FindBin::Bin/../../lib";
use lib "$FindBin::Bin/../../bin";
require "geturl";
use ariba::monitor::Query;
use ariba::monitor::QueryManager;
use ariba::rc::InstalledProduct;
use ariba::Ops::ProductAPIExtensions;
use JSON;
use Pod::Usage;
use Getopt::Long;


my $debug = 0;

my($mon,$me,$siteurl,$url,@results,$decoded_json);
 
sub main {
    my $sendEmail = 0;
    my $sendPage = 0;
    
    GetOptions(
        "help|h" => sub { pod2usage(1); },
        "debug|d+" => \$debug,
        "e" => \$sendEmail,
        "p" => \$sendPage,
    );

    $mon = ariba::rc::InstalledProduct->new('mon');
    $me = ariba::rc::InstalledProduct->new('community', $mon->service());
    $siteurl = $me->default('SiteURLSecure');
     chomp($siteurl);
     my $start_time = `date +%s` - (15*60);
     my $interval = 15*60;
     $url = "$siteurl/internal/virus_scan_monitoring.php?start_ts=\'$start_time\'&duration_sec=\'$interval\'";
     eval { geturl("-e","-q","-timeout", '60', "-results",\@results,$url) };
       if ($@) {
		@results = ("URL error");
          
       } else {
          my $json = join('',@results);
          eval { $decoded_json = JSON::decode_json($json); };
           if ($@) {
		@results=("Invalid JSON");
            }
         }
     my %queries;
     $queries{'Timed-out calls'} = {
                                    crit => "answer > 0 or answer =~ /(invalid|error)/i",
                                    severity => 1,
                                    description => 'Timed out virus scans',
                                    correctiveActions => [
                                          Ops => '1)Ensure that ClamAV monitoring shows up (ClamAV has its own monitoring) and if not restart
                                                  2)Send email to AUC Community alias DL ARB AUC_Eng (External) <DL_5419DA6CFD84A00838000005@exchange.sap.corp>'
                                    ],
                                    recordMaxResults => 8640,
				                    perl => sub {  return scan_status('timeout_calls'); }, 
                                    inf_field   => "timed_out_calls",
                                    inf_default => 0,
                                  };

     $queries{'Request failed calls'} = {
                                         crit => "answer > 0 or answer =~ /(invalid|error)/i",
                                         severity => 1,
                                         description => 'Request failed virus scans',
                                         correctiveActions => [
                                              Ops => '1)Ensure that ClamAV monitoring shows up (ClamAV has its own monitoring) and if not restart
                                                      2)Send email to AUC Community alias DL ARB AUC_Eng (External) <DL_5419DA6CFD84A00838000005@exchange.sap.corp>'
                                          ],
                                          recordMaxResults => 8640,
                                          perl =>  sub { return scan_status('failed_calls'); },
                                          inf_field   => "request_failed_calls",
                                          inf_default => 0,
                                         };
      $queries{'Clean calls'} =  {
                                   warn => "answer =~ /(invalid|error)/i",
                                   description => 'Clean virus scans',
                                   info => 1,
                                   recordMaxResults => 8640,
                                   perl =>  sub { return scan_status('clean_calls'); },
                                   inf_field   => "clean_calls",
                                   inf_default => 0,
                                 };

      $queries{'Virus found calls'} = {
                                         warn => "answer >= 3 or answer =~ /(invalid|error)/i",
                                         description => 'Viruses found',
                                         correctiveActions => [
                                               Ops => 'Send email to AUC Community alias DL ARB AUC_Eng (External) <DL_5419DA6CFD84A00838000005@exchange.sap.corp>'
                                         ],
                                         recordMaxResults => 8640,
                                         perl =>  sub { return scan_status('virus_found_calls'); },
                                         inf_field   => "virus_found_calls",
                                         inf_default => 0,
                                         };

      $queries{'Total Virus scan requests'} = {
                                                 warn => "answer =~ /(invalid|error)/i",
                                                 description => 'Total virus scan requests',
                                                 info => 1,
                                                 recordMaxResults => 8640,
                                                 perl => sub { return scan_status('total'); },
                                                 inf_field   => "total_virus_scan_requests",
                                                 inf_default => 0,
       
       };

      my $email = $me->default('notify.email');
      $queries{'influx_details'} = { measurement => 'community_clamav_status'};
      my $qm = ariba::monitor::QueryManager->newWithDetails('ClamAV Status', $me->name(), $me->service(), $me->customer(), \%queries);
      $qm->processQueries($debug, $email, $sendEmail, $sendPage);
                                    
    }

 sub scan_status {
     my $results = join('',@results);
     if ($results =~ m/URL error/) {
        return "Error in fetching $url";
     } elsif ($results =~ m/Invalid JSON/) {
        return "Invalid JSON returned from $url";
     } else {
     my $p = shift;
     if ($p eq 'timeout_calls') {
        return $decoded_json->{'timed_out'};
     } elsif ($p eq 'failed_calls') {
             return $decoded_json->{'failed'};
       } elsif ($p eq 'clean_calls') {
               return $decoded_json->{'clean'};
         } elsif ($p eq 'virus_found_calls') {
                 return $decoded_json->{'viruses'};
           } elsif ($p eq 'total'){
                   return $decoded_json->{'total'};
             }
    }
 }

main(@ARGV);

__END__
