#sid  !! influx_tablename !! metric !!  sql

default !! oracle_block_session_info !! block_AUTO !! select B.USERNAME, B.SID,B.SERIAL#,B.CLIENT_IDENTIFIER,B.SQL_ID,B.PREV_SQL_ID,B.STATUS,W.LAST_CALL_ET,W.USERNAME,W.SID,W.SERIAL#,W.CLIENT_IDENTIFIER,W.sql_id,W.prev_sql_id FROM (select SID,SERIAL#,USERNAME,STATUS,BLOCKING_SESSION,LAST_CALL_ET,sql_id,prev_sql_id,CLIENT_IDENTIFIER from v$session where BLOCKING_SESSION >0 and type <> 'BACKGROUND' and event like '%enq%' and last_call_et > 180) W, (select SID,SERIAL#,USERNAME,STATUS,LAST_CALL_ET,sql_id,prev_sql_id,CLIENT_IDENTIFIER from v$session where type <> 'BACKGROUND' and sid in (select blocking_session from v$session where blocking_session >0)) B where W.BLOCKING_SESSION=B.SID union select B.USERNAME,B.SID,B.SERIAL#,B.CLIENT_IDENTIFIER,B.SQL_ID,B.PREV_SQL_ID,B.STATUS,W.LAST_CALL_ET,W.USERNAME,W.SID,W.SERIAL#,W.CLIENT_IDENTIFIER,W.sql_id,W.prev_sql_id FROM (select SID,SERIAL#,USERNAME,STATUS,BLOCKING_SESSION,LAST_CALL_ET,sql_id,prev_sql_id,CLIENT_IDENTIFIER from v$session where BLOCKING_SESSION >0 and type <> 'BACKGROUND' and last_call_et > 90 and event like '%enq%') W, (select SID,SERIAL#,USERNAME,STATUS,LAST_CALL_ET,sql_id,prev_sql_id,CLIENT_IDENTIFIER from v$session where sid in (select blocking_session from v$session where blocking_session >0 group by blocking_session having count(*) > 10) and type <> 'BACKGROUND') B where W.BLOCKING_SESSION=B.SID !! B_USERNAME, B_SID,B_SERIAL#,B_CLIENT_IDENTIFIER,B_SQL_ID|t,B_PREV_SQL_ID,B_STATUS,W_LAST_CALL_ET,W_USERNAME,W_SID,W_SERIAL#,W_CLIENT_IDENTIFIER,W_sql_id|t,W_prev_sql_id

default !! oracle_fileio !! fileio_AUTO !! SELECT Substr(d.name,1,50) filename,  f.phyblkrd blocks_read, f.phyblkwrt blocks_written, f.phyblkrd + f.phyblkwrt total_io  FROM   v$filestat f, v$datafile d WHERE  d.file# = f.file# ORDER BY f.phyblkrd + f.phyblkwrt DESC !! filename|t,blocks_read,blocks_written,total_io


#ORACLE HEALTH
default !! oracle_health !! backup_mode !! select file# from v$backup where status = 'ACTIVE' 
default !! oracle_health !! isup !! select 1 xxx from dual 
default !! oracle_health !! log_sequence !! select sequence# from v$log where status = 'CURRENT'
default !! oracle_health !! cache_hit_ratio !! select round((1 - (a.reads / (b.bgets + c.cgets)))*100,2) from (select value reads from v$sysstat where name = 'physical reads') a, (select value bgets from v$sysstat where name = 'db block gets') b, (select value cgets from v$sysstat where name = 'consistent gets') c
default !! oracle_health !! percent_of_blocked_active_session !! select round((blocked/active)*100,2) percent_blocked from (select count(*) active from v$session where status = 'ACTIVE'), (select count(*) blocked from v$session where status = 'ACTIVE' and blocking_session is not null)
default !! oracle_health !! current_process_count !! select count(*) from v$process
default !! oracle_health !! dataguard_open_cursor_count !! SELECT SUM(a.value) FROM v$sesstat a, v$session s WHERE s.program like '%LSP%' and s.sid=a.sid and a.STATISTIC#=3
default !! oracle_health !! db_file_used !! select (a.dbf_num/b.value)*100 from ( select count(*) dbf_num from dba_data_files) a, v$parameter b where b.name = 'db_files'
default !! oracle_health !! dynamic_parameters_count !! select count(*) from v$parameter where ismodified like 'SYSTEM%'
default !! oracle_health !! flashback_status !! select flashback_on from v$database
default !! oracle_health !! force_logging|f !! select force_logging from v$database
default !! oracle_health !! flashback_hours !! select trunc((sysdate-oldest_flashback_time)*24) "Hours of Flashback" from v$flashback_database_log
default !! oracle_health !! child_cursor_count !! select max(version_count) from v$sqlarea
default !! oracle_health !! remaining_session_count !! select /*+ no_merge(p) */ p_value-sesscount from (select count(username) sesscount from v$session), (select to_number(value) p_value from v$parameter where name = 'sessions') p
default !! oracle_health !! objects_memory_allocation !! select /*+ no_merge(d) */ sum(bytes)/1024/1024 from sys.dba_segments d
default !! oracle_health !! shared_pool_cache_hit_ratio !! select PINHITS/PINS*100 from v$librarycache where namespace = 'SQL AREA'
default !! oracle_health !! shared_pool_invitation !! select INVALIDATIONS from v$librarycache where namespace = 'SQL AREA'
default !! oracle_health !! shared_pool_reload !! select RELOADS from v$librarycache where namespace = 'SQL AREA'
default !! oracle_health !! dba_data_files_size !! select sum(bytes)/1024/1024 from sys.dba_data_files
default !! oracle_health !! statistic_retention_time !! select dbms_stats.get_stats_history_retention from dual
default !! oracle_health !! SYSAUX_auto_extened_size_in_MB !! select round(((select sum(floor(decode(MAXBYTES,0,BYTES,MAXBYTES)-BYTES)) from dba_data_files c, dba_tablespaces d where c.tablespace_name='SYSAUX' and c.tablespace_name=d.tablespace_name))/1024/1024) from dual
default !! oracle_health !! SYSTEM_auto_extend_size_in_MB !! select round(((select sum(floor(decode(MAXBYTES,0,BYTES,MAXBYTES)-BYTES)) from dba_data_files c, dba_tablespaces d where c.tablespace_name='SYSTEM' and c.tablespace_name=d.tablespace_name))/1024/1024) from dual
default !! oracle_health !! free_chunk_number !! select round(((select sum(floor(decode(MAXBYTES,0,BYTES,MAXBYTES)-BYTES)) from dba_data_files c, dba_tablespaces d where c.tablespace_name='SYSTEM' and c.tablespace_name=d.tablespace_name))/1024/1024) from dual
default !! oracle_health !! incremental_constraint_seq !! select con# from con$ where name='_NEXT_CONSTRAINT' and owner#=0
default !! oracle_health !! db_lock_count !! select db_wait_monitor(30,20,360) from dual


#PHYSICAL DATAGUARD
default !! physical_dataguard !! DR_apply_status !! select status from v$managed_standby\@dg_standby where process='MRP0'
default !! physical_dataguard !! apply_lag !! select extract(day from to_dsinterval(value)) * 86400 + extract(hour from to_dsinterval(value)) * 3600 + extract(minute from to_dsinterval(value)) * 60 + extract(second from to_dsinterval(value)) from v$dataguard_stats\@dg_standby where name = 'apply lag'
default !! physical_dataguard !! arichive_destination_error !! select error from v$archive_dest_status where dest_id=2
default !! physical_dataguard !! average_apply_rate !! select avg(sofar) from v$recovery_progress\@dg_standby where item='Active Apply Rate'
default !! physical_dataguard !! gap_status !! select (case when is_running = 'RUNNING' then (case when status = 'WAIT_FOR_GAP' then 'Gap Waiting for Log '||sequence# else 'No Gap' end) else 'Recovery not Running' end) "Gap status" from (select '1' joinit, status, sequence#, process from v$managed_standby\@dg_standby where process like 'MRP%') a, (select '1' joinit, decode(count(*),0,'NOTRUNNING','RUNNING') is_running from v$managed_standby\@dg_standby where process like 'MRP%') b where a.joinit (+)=b.joinit
default !! physical_dataguard !! unapplied_log_quantity !! select max(unapp_redo) from (select round((sum(blocks*block_size)/1024/1024/1024),2) unapp_redo from v$archived_log\@dg_standby where archived='YES' and applied='NO' and registrar='RFS' and sequence# > (select max(sequence#) from v$archived_log\@dg_standby where archived='YES' and applied='YES') union select 0 unapp_redo from dual)
default !! physical_dataguard !! recovery_mode !! select recovery_mode from v$archive_dest_status where type='PHYSICAL'
default !! physical_dataguard !! shipping_lag !! select(next_time_onpri-next_time_ondr)*86400 from (select max(sequence#) max_seq_onpri, max(next_time) next_time_onpri from v$archived_log val, v$database vdb where val.resetlogs_change# = vdb.resetlogs_change# group by thread# order by 1), (select max(sequence#) max_seq_ondr, max(next_time) next_time_ondr from v$archived_log\@dg_standby val, v$database\@dg_standby vdb where val.resetlogs_change# = vdb.resetlogs_change# group by thread# order by 1)
default !! physical_dataguard !! time_to_apply !! select round(unapplied_redo/apply_rate,2) from (select max(unapp_redo) unapplied_redo from (select sum(blocks*block_size)/1024 unapp_redo from v$archived_log\@dg_standby where archived='YES' and applied='NO' and registrar='RFS' and sequence# > (select max(sequence#) from v$archived_log\@dg_standby where archived='YES' and applied='YES') union select 0 unapp_redo from dual)), (select avg(sofar) apply_rate from v$recovery_progress\@dg_standby where item='Active Apply Rate')
default !! physical_dataguard !! total_lag !! select (primary_date-standby_date) * 86400 from (select cast(scn_to_timestamp(current_scn) as date) primary_date from v$database) primary_date, (select cast(scn_to_timestamp(current_scn) as date) standby_date from v$database\@dg_standby)








