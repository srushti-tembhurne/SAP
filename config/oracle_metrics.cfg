#sid  !! influx_tablename[,special_table_level_field] !! metric !!  sql
#default !! oracle_sessions !! open_connections !! select count(*) from v$session 
#default !! oracle_sessions !! active_sessions !! select count(*) from v$session where  type !='BACKGROUND' and status='ACTIVE'

#default !! oracle_health_details !! hours_of_flashback !! select trunc((sysdate-oldest_flashback_time)*24) "Hours of Flashback" from v$flashback_database_log

default !! oracle_tablespace !! AUTO !! select a.tablespace_name, c.min_extlen min_extlen,(free+grow)/1024/1024 space_mb, 25000/(c.min_extlen/(1024*1024)) space_mb_warn_threshold, 20000/(c.min_extlen/(1024*1024)) space_mb_crit_threshold from (select tablespace_name ,sum(maxbytes-bytes) grow from dba_data_files where maxbytes > bytes group by tablespace_name ) a, (select tablespace_name , sum(bytes) free from dba_free_space group by tablespace_name ) b, (select tablespace_name, min_extlen from dba_tablespaces where tablespace_name not in ('RBS','AUDIT_STORAGE','CSIDATA1', 'STBTEMP01', 'TEMP','UNDO1', 'SYSTEM', 'SYSAUX') and ALLOCATION_TYPE in ('UNIFORM','SYSTEM')) c  where a.tablespace_name=b.tablespace_name AND a.tablespace_name=c.tablespace_name !! tablespace_name|t,min_extlen,space_mb,space_mb_warn_threshold,space_mb_crit_threshold
 
#default !! oracle_health_details !! Cache_Hit_Ratio !! select Round(((Sum(Decode(a.name, 'consistent gets', a.value, 0)) + Sum(Decode(a.name, 'db block gets', a.value, 0)) - Sum(Decode(a.name, 'physical reads', a.value, 0))  )/ (Sum(Decode(a.name, 'consistent gets', a.value, 0)) + Sum(Decode(a.name, 'db block gets', a.value, 0))))*100,2) "Hit Ratio %" FROM   v$sysstat a

#default !! oracle_health_details !! processes_on_main_db  !! select /*+ no_merge(p) */ p_value-sesscount from (select count(username) sesscount from v$session), (select to_number(value) p_value from v$parameter where name = 'processes') p

#default !! oracle_fileio !! fileio_AUTO !! SELECT Substr(d.name,1,50) filename,  f.phyblkrd blocks_read, f.phyblkwrt blocks_written, f.phyblkrd + f.phyblkwrt total_io  FROM   v$filestat f, v$datafile d WHERE  d.file# = f.file# ORDER BY f.phyblkrd + f.phyblkwrt DESC !! filename|t,blocks_read,blocks_written,total_io

#default !! oracle_commit !! commit !! select value from V$SYSMETRIC where metric_name = 'User Commits Per Sec' and group_id = 2
#default !! oracle_commit !! commit_percentage !! select value from V$SYSMETRIC where metric_name = 'User Commits Percentage' and group_id = 2

#REDO METRICS
#default !! oracle_redo !! redo_gen_sec !! select value from V$SYSMETRIC where metric_name = 'Redo Generated Per Sec'  and group_id = 2
#default !! oracle_redo !! redo_gen_txn !! select value from V$SYSMETRIC where metric_name = 'Redo Generated Per Txn'  and group_id = 2
#default !! oracle_redo !! redo_write_sec !! select value from V$SYSMETRIC where metric_name = 'Redo Writes Per Sec'  and group_id = 2
#default !! oracle_redo !! redo_write_txn !! select value from V$SYSMETRIC where metric_name = 'Redo Writes Per Txn'  and group_id = 2

#TABLE SCAN METRICS

#default !! oracle_table_scan !! long_table_scan_sec !! select value from V$SYSMETRIC where metric_name = 'Long Table Scans Per Sec'  and group_id = 2
#default !! oracle_table_scan !! long_table_scan_txn !! select value from V$SYSMETRIC where metric_name = 'Long Table Scans Per Txn'  and group_id = 2
#default !! oracle_table_scan !! total_table_scan_sec !! select value from V$SYSMETRIC where metric_name = 'Total Table Scans Per Sec'  and group_id = 2 
#default !! oracle_table_scan !! total_table_scan_txn !! select value from V$SYSMETRIC where metric_name = 'Total Table Scans Per Txn'  and group_id = 2
#default !! oracle_table_scan !! full_index_scan_sec !! select value from V$SYSMETRIC where metric_name = 'Full Index Scans Per Sec'  and group_id = 2
#default !! oracle_table_scan !! full_index_scan_txn !! select value from V$SYSMETRIC where metric_name = 'Full Index Scans Per Txn'  and group_id = 2
#default !! oracle_table_scan !! total_index_scan_sec !! select value from V$SYSMETRIC where metric_name = 'Total Index Scans Per Sec'  and group_id = 2
#default !! oracle_table_scan !! total_index_scan_txn !! select value from V$SYSMETRIC where metric_name = 'Total Index Scans Per Txn'  and group_id = 2
#default !! oracle_table_scan !! total_table_scan_user !! select value from V$SYSMETRIC where metric_name = 'Total Table Scans Per User Call'  and group_id = 2

#default !! oracle_health_details !! Physical_DG_Apply_Status !! select status from v$managed_standby\@dg_standby where process='MRP0'
#default !! oracle_health_details !! Physical_DG_Apply_lag !! select extract(day from to_dsinterval(value)) * 86400 + extract(hour from to_dsinterval(value)) * 3600 + extract(minute from to_dsinterval(value)) * 60 + extract(second from to_dsinterval(value)) from v$dataguard_stats\@dg_standby where name = 'apply lag'
#SSPAUX2 !! oracle_health !! locking !! select db_wait_monitor(30,20,360) from dual

#MULTILE ROWS
#default !! oracle_ORA_04031_error !! AUTO !! select REQUEST_FAILURES from v$shared_pool_reserved
#default !! oracle_open_cursor_20 !! AUTO !! select /*+leading(n t p) */ s.sid, s.username, s.osuser, n.name, t.value, p.max_cursors,p.max_cursors - t.value diff from v$session s, v$sesstat t, v$statname n, (select to_number(value) max_cursors from v$parameter where name = 'open_cursors' and rownum >0) p where s.type != 'BACKGROUND' and s.sid=t.sid and n.statistic# = t.statistic# and n.name = 'opened cursors current' and p.max_cursors - t.value < 20
#default !! oracle_open_cursor_50 !! AUTO !! select /*+leading(n t p) */ s.sid, s.username, s.osuser, n.name, t.value, p.max_cursors,p.max_cursors - t.value diff from v$session s, v$sesstat t, v$statname n, (select to_number(value) max_cursors from v$parameter where name = 'open_cursors' and rownum >0) p where s.type != 'BACKGROUND' and s.sid=t.sid and n.statistic# = t.statistic# and n.name = 'opened cursors current' and p.max_cursors - t.value < 50

#ORACLE HEALTH
default !! oracle_health !! backup_mode !! select file# from v$backup where status = 'ACTIVE' 
default !! oracle_health !! current_active_session !! select count(*) current_active_session from  v$session where status = 'ACTIVE'
default !! oracle_health !! current_session !! select count(*) current_session from  v$session
default !! oracle_health !! max_minutes_in_backup_mode !! select max(round((sysdate-time)*24*60,2)) max_minutes_in_backup_mode from  v$backup b, dba_data_files d where b.file#=d.file_id and b.status= 'ACTIVE'
default !! oracle_health !! isup !! select 0 xxx from dual 
default !! oracle_health !! db_audit_record_count !! select count(*) from dba_audit_trail where timestamp > sysdate-1 
default !! oracle_health !! log_sequence !! select sequence# from v$log where status = 'CURRENT'
default !! oracle_health,is_replicated|t !! cache_hit_ratio !! select round((1 - (a.reads / (b.bgets + c.cgets)))*100,2) from (select value reads from v$sysstat where name = 'physical reads') a, (select value bgets from v$sysstat where name = 'db block gets') b, (select value cgets from v$sysstat where name = 'consistent gets') c
default !! oracle_health !! percent_of_blocked_active_session !! select round((blocked/active)*100,2) percent_blocked from (select count(*) active from v$session where status = 'ACTIVE'), (select count(*) blocked from v$session where status = 'ACTIVE' and blocking_session is not null)
default !! oracle_health !! current_process_count !! select count(*) from v$process
default !! oracle_health !! proclimit !! select to_number(value) from v$parameter where name='processes'
default !! oracle_health !! dataguard_open_cursor_count !! SELECT SUM(a.value) FROM v$sesstat a, v$session s WHERE s.program like '%LSP%' and s.sid=a.sid and a.STATISTIC#=3
default !! oracle_health,is_replicated|t !! db_file_used !! select (a.dbf_num/b.value)*100 from ( select count(*) dbf_num from dba_data_files) a, v$parameter b where b.name = 'db_files'
default !! oracle_health !! dynamic_parameters_count !! select count(*) from v$parameter where ismodified like 'SYSTEM%'
default !! oracle_health !! flashback_status !! select flashback_on from v$database
default !! oracle_health !! force_logging !! select force_logging from v$database
default !! oracle_health !! flashback_hours !! select trunc((sysdate-oldest_flashback_time)*24) "Hours of Flashback" from v$flashback_database_log
default !! oracle_health !! child_cursor_count !! select max(version_count) from v$sqlarea
default !! oracle_health !! remaining_session_count !! select /*+ no_merge(p) */ p_value-sesscount from (select count(username) sesscount from v$session), (select to_number(value) p_value from v$parameter where name = 'sessions') p
default !! oracle_health !! objects_memory_allocation !! select /*+ no_merge(d) */ sum(bytes)/1024/1024 from sys.dba_segments d
default !! oracle_health !! shared_pool_cache_hit_ratio !! select PINHITS/PINS*100 from v$librarycache where namespace = 'SQL AREA'
default !! oracle_health !! shared_pool_invalidation !! select INVALIDATIONS from v$librarycache where namespace = 'SQL AREA'
default !! oracle_health !! shared_pool_reload !! select RELOADS from v$librarycache where namespace = 'SQL AREA'
default !! oracle_health !! dba_data_files_size !! select sum(bytes)/1024/1024 from sys.dba_data_files
default !! oracle_health,is_replicated|t !! statistic_retention_time !! select dbms_stats.get_stats_history_retention from dual
default !! oracle_health !! SYSAUX_auto_extened_size_in_MB !! select round(((select sum(floor(decode(MAXBYTES,0,BYTES,MAXBYTES)-BYTES)) from dba_data_files c, dba_tablespaces d where c.tablespace_name='SYSAUX' and c.tablespace_name=d.tablespace_name))/1024/1024) from dual
default !! oracle_health !! SYSTEM_auto_extend_size_in_MB !! select round(((select sum(floor(decode(MAXBYTES,0,BYTES,MAXBYTES)-BYTES)) from dba_data_files c, dba_tablespaces d where c.tablespace_name='SYSTEM' and c.tablespace_name=d.tablespace_name))/1024/1024) from dual
default !! oracle_health !! free_chunk_number !! select round(((select sum(floor(decode(MAXBYTES,0,BYTES,MAXBYTES)-BYTES)) from dba_data_files c, dba_tablespaces d where c.tablespace_name='SYSTEM' and c.tablespace_name=d.tablespace_name))/1024/1024) from dual
default !! oracle_health !! log_file_sync !! select round(AVERAGE_WAIT_FG,0) AVERAGE_WAIT_FG from v$system_event where event = 'log file sync'
default !! oracle_health !! redo_log_size !! SELECT round(sum((blocks*block_size)/(1073741824))) Size_GB FROM v$archived_log WHERE to_char(first_time,'dd-mon-yy hh24') = to_char(sysdate-1/24,'dd-mon-yy hh24') AND dest_id=1 GROUP BY to_char(first_time,'dd-mon-yy hh24')
default !! oracle_health !! used_cursors !! select max(a.value) from v$sesstat a, v$statname b, v$parameter p where a.statistic# = b.statistic# and b.name = 'opened cursors current' and p.name= 'open_cursors' group by p.value
default !! oracle_health !! open_cursors !! select p.value from v$sesstat a, v$statname b, v$parameter p where a.statistic# = b.statistic# and b.name = 'opened cursors current' and p.name= 'open_cursors' group by p.value

#PHYSICAL DATAGUARD
default !! physical_dataguard,in_backup !! DR_apply_status !! select status from v$managed_standby@dg_standby where process='MRP0'
default !! physical_dataguard !! apply_lag !! select extract(day from to_dsinterval(value)) * 86400 + extract(hour from to_dsinterval(value)) * 3600 + extract(minute from to_dsinterval(value)) * 60 + extract(second from to_dsinterval(value)) from v$dataguard_stats@dg_standby where name = 'apply lag'
default !! physical_dataguard !! arichive_destination_error !! select error from v$archive_dest_status where dest_id=2
default !! physical_dataguard !! average_apply_rate !! select avg(sofar) from v$recovery_progress@dg_standby where item='Active Apply Rate'
default !! physical_dataguard,in_backup !! gap_status !! select (case when is_running = 'RUNNING' then (case when status = 'WAIT_FOR_GAP' then 'Gap Waiting for Log '||sequence# else 'No Gap' end) else 'Recovery not Running' end) "Gap status" from (select '1' joinit, status, sequence#, process from v$managed_standby@dg_standby where process like 'MRP%') a, (select '1' joinit, decode(count(*),0,'NOTRUNNING','RUNNING') is_running from v$managed_standby@dg_standby where process like 'MRP%') b where a.joinit (+)=b.joinit
default !! physical_dataguard !! unapplied_log_quantity !! select max(unapp_redo) from (select round((sum(blocks*block_size)/1024/1024/1024),2) unapp_redo from v$archived_log@dg_standby where archived='YES' and applied='NO' and registrar='RFS' and sequence# > (select max(sequence#) from v$archived_log@dg_standby where archived='YES' and applied='YES') union select 0 unapp_redo from dual)
default !! physical_dataguard,in_backup,is_physical_active_realtime_replication !! recovery_mode !! select recovery_mode from v$archive_dest_status where type='PHYSICAL'
default !! physical_dataguard,is_physical_active_realtime_replication !! shipping_lag !! select(next_time_onpri-next_time_ondr)*86400 from (select max(sequence#) max_seq_onpri, max(next_time) next_time_onpri from v$archived_log val, v$database vdb where val.resetlogs_change# = vdb.resetlogs_change# group by thread# order by 1), (select max(sequence#) max_seq_ondr, max(next_time) next_time_ondr from v$archived_log@dg_standby val, v$database@dg_standby vdb where val.resetlogs_change# = vdb.resetlogs_change# group by thread# order by 1)
default !! physical_dataguard !! time_to_apply !! select round(unapplied_redo/apply_rate,2) from (select max(unapp_redo) unapplied_redo from (select sum(blocks*block_size)/1024 unapp_redo from v$archived_log@dg_standby where archived='YES' and applied='NO' and registrar='RFS' and sequence# > (select max(sequence#) from v$archived_log@dg_standby where archived='YES' and applied='YES') union select 0 unapp_redo from dual)), (select avg(sofar) apply_rate from v$recovery_progress@dg_standby where item='Active Apply Rate')
default !! physical_dataguard !! total_lag !! select (primary_date-standby_date) * 86400 from (select cast(scn_to_timestamp(current_scn) as date) primary_date from v$database) primary_date, (select cast(scn_to_timestamp(current_scn) as date) standby_date from v$database@dg_standby)








