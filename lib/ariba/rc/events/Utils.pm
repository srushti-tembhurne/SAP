package ariba::rc::events::Utils;

#
# Static helper methods
#

use Time::HiRes;
use ariba::rc::events::Constants;
use ariba::rc::events::EventRegistry;

#
# generic harness to retry a subroutine n times
#
# given:
# - number of retries to attempt
# - problem in the form of a regexp that appears in $@
# - reference to a subroutine
#
# then:
# attempt to call the subroutine n times checking
# for the named problem. give up when we have
# reached the maximum # of retries or if an unexpected
# error occurs.
#
# example:
# my $ok = ariba::rc::events::Utils::retry (10, "resource unavailable", sub { whatever });
#
sub retry 
{
    my ($retries, $problem, $func) = @_;

    attempt: 
    {
        my $result;

        # return true if successful
        return 1 if eval { $result = $func->(); 1 };

        # failed: something bad happened other than what we expected
        return 0 unless $@ =~ /$problem/;

        # stop trying
        last attempt if $retries < 1;

        # sleep then try again
        Time::HiRes::sleep (0.1);
        $retries--;
        redo attempt;
    }

    return 0;
}

#
# Generate RFC-822 date for RSS generators:
# Wed, 09 Jun 2010 04:20:00 -0000
# Reference: http://www.perl.com/lpt/a/718
#
my @DAYS = qw (Sun Mon Tue Wed Thu Fri Sat);
my @MONTHS = qw( Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec );

sub pub_date 
{
    my ($when) = @_;
    $when = $when || time();
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime ($when);
    return sprintf "%s, %02d %s %04d %02d:%02d:%02d -0000",
        $DAYS[$wday],
        $mday,
        $MONTHS[$mon],
        1900 + $year,
        $hour,
        $min,
        $sec;
}

#
# Taint protection:
# Check named CGI argument against supplied regexp
#
sub parse_arg
{
    my ($cgi, $arg, $regex) = @_;

    my $raw = $cgi->param($arg) || "";
    return "" unless $raw;

    my ($cooked) = $raw =~ m#^($regex)$#i;
    $cooked = $cooked || "";

    return $cooked;
}

#
# Export all feeds as OPML file
#
sub export_opml
{
    my $category = shift || "";
    my $registry = new ariba::rc::events::EventRegistry();
    my @classes = $registry->get_feeds();
    my $now = localtime (time());

    print <<FIN;
<?xml version="1.0" encoding="UTF-8"?>
<!-- OPML generated by RC on $now -->
<opml version="1.1">
    <head>
        <title>RC Events</title>
        <ownerEmail>Ask_RC\@ariba.com</ownerEmail>
    </head>
    <body>
FIN

    foreach my $class (@classes)
    {
        next unless $class->type() eq ariba::rc::events::Constants::channel_type_rss();

        # optional: only show feeds in specified category
        if ($category && $category ne "_all")
        {
            next unless $class->category() eq $category;
        }
        my $channel_name = $class->name();
        my $title = $class->title();
        my $url = join "/", ariba::rc::events::Constants::root_url(), $class->file();
        print <<FIN;
        <outline text="$title" description="" title="$title" type="rss" version="RSS" htmlUrl="$url" xmlUrl="$url"/>
FIN
    }

    print <<FIN;
    </body>
</opml>
FIN
}

#
# Add hostname if not already present
#
sub normalize_email_address
{
    my ($username) = @_;

    if ($username !~ m#@#)
    {
        $username .= '@ariba.com';
    }

    return $username;
}

1;
