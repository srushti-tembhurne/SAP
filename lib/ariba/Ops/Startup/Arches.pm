package ariba::Ops::Startup::Arches;

# $Id: //ariba/services/tools/lib/perl/ariba/Ops/Startup/Arches.pm#17 $

use strict;

use File::Path;
use File::Basename;
use ariba::Ops::Startup::Common;
use ariba::rc::Utils;

use ariba::rc::Globals;

sub writeConfFiles  {
    my $me = shift;
    my $installDir = $me->installDir();
    my $cluster = $me->currentCluster();
    my $sourceFile = "ariba.arches.user.config.cfg";
    my $sourcePath = $installDir . "/config/$sourceFile";
    my $destFile = "ariba.arches.user.config.properties";
    my $destPath = $installDir . "/repository/usr/$destFile";

    my @deploymentDefaultKeys = (
        "Hadoop.DFS.NameNode.NameNode1.$cluster.RPCAddress",
        "Hadoop.DFS.NameNode.NameNode2.$cluster.RPCAddress",
        "Hadoop.MapRed.JobTracker.JobTracker1.$cluster.RPCAddress",
        "Hadoop.MapRed.JobTracker.JobTracker2.$cluster.RPCAddress",
        "HBase.ZooKeeper.$cluster.Quorum",
        "Arches.ZooKeeper.$cluster.Quorum"
    );

    my %runtimeVars = ();
    $runtimeVars{"HADOOP-NAMENODE1-RPC-ADDRESS"} = $me->default($deploymentDefaultKeys[0]);
    $runtimeVars{"HADOOP-NAMENODE2-RPC-ADDRESS"} = $me->default($deploymentDefaultKeys[1]);
    $runtimeVars{"HADOOP-JOBTRACKER1-RPC-ADDRESS"} = $me->default($deploymentDefaultKeys[2]);    
    $runtimeVars{"HADOOP-JOBTRACKER2-RPC-ADDRESS"} = $me->default($deploymentDefaultKeys[3]);
    $runtimeVars{"HBASE-ZOOKEEPER-QUORUM"} = $me->default($deploymentDefaultKeys[4]);
    $runtimeVars{"ARCHES-ZOOKEEPER-QUORUM"} = $me->default($deploymentDefaultKeys[5]);

    eval {
        # skip if source file does not exist
        unless (-e $sourcePath) {
            print "Skipping generation of $destPath as $sourcePath does not exist\n";
            return;
        }
     
        # skip if dest file is newer than source file, which indicates it has already
        # been generated by another process
        # Fixing syntax error : HOA-103962
        if ( -e $destPath && ((-M $destPath) < (-M $sourcePath)) ) {
            print "Skipping generation of $destPath as it is newer than $sourcePath\n";
            return;
        }

        # read from source file
        open(my $sourceFH, "< $sourcePath") || die "Failed to open $sourcePath, $!";
        my @contents = <$sourceFH>;
        close($sourceFH);

        # check for source content
        scalar(@contents) || die "No contents read from $sourcePath";

        # expand runtime vars in source content
        my $updatedContents = ariba::Ops::Startup::Common::expandRuntimeVars(join('', @contents), \%runtimeVars);

        # change file to writable if necessary
        chmod(0644, $destPath) if (-f $destPath && ! -w $destPath);

        # write updated content with runtime vars to dest file
        open(my $destFh, "> $destPath") || die "Failed to open $destPath for writing, $!";
        print $destFh $updatedContents || die "Failed to write to $destPath, $!";
        close($destFh) || die "Failed to close $destPath, $!";
      };

      print "Error: $@. $destPath may not be generated.\n" if ( $@ );
}

sub createSymLinksForBuyerJar {
    my $me = shift;
    my $buyer = shift;

    my $service = $me->service();
    my $archesInstallDir = $me->installDir();
    my $archesProduct = $me->name();
    my $product = $buyer->name();
    my $buyerInstallDir = $buyer->installDir();

    #
    # buyer jar file location: /home/svc<service>/buyer/<buyer_build>/classes/
    # Create link from arches to the physical directoy location of buyer ariba.catalog.indexadapter.jar
    # /home/svc<service>/buyer/bundles -> /home/svc<service>/buyer/<buyer_build>/classes
    #
    my $buyerJars = "$buyerInstallDir/classes";
    my $linkName = "/home/svc$service/$product/bundles";

    # Make sure that the jar directory exists
    unless (-d $buyerJars) {
        print "Warning: symlink $linkName -> $buyerJars skipped, src doesn't exist\n";
        return;
    }

    #
    # Check to make sure that a link pointing to right
    # location does not already exist
    #
    if (-l $linkName) {
        print "Deleting old symlink [$linkName]\n";
        unlink($linkName);
    }

    print "Creating $linkName -> $buyerJars\n";

    unless (symlink($buyerJars, $linkName)) {
        print "Warning: unable to create symlink $linkName -> $buyerJars\n";
    }
}

sub createRamdisk {
    my $me = shift;
    ## Only run if <Arches><useRamdisk>1</useRamdisk></Arches> is set to 1/true in DD.xml
    return unless $me->default( 'Arches.useRamdisk' );

    my $uid = $<;
    ## Read location from DD, default to /var/ramdisk/*SERVICE*
    my $ramdiskDirs = $me->default( 'Arches.ramDir' ) or die "Missing parameter Arches.ramDir\n";
    my @ramDirs = split('\s*,\s*', $ramdiskDirs);
    my $ramdiskSize = $me->default( 'Arches.ramdiskSize' );

    my @mounted = `/bin/mount -t tmpfs`;
    #
    # sample output of /bin/mount -t tmpfs
    # tmpfs on /dev/shm type tmpfs (rw)
    # ramdisk on /var/ramdisk type tmpfs (rw,uid=0,gid=0,mode=1777,size=128g)
    #

    for my $ramdiskDir (@ramDirs) {
        print "Creating ramdisk for directory $ramdiskDir with size $ramdiskSize\n";
        my $fstabEntry = "ramdisk  $ramdiskDir   tmpfs   uid=$uid,gid=101,mode=755,size=$ramdiskSize 0 0";
        my $fstab      = '/etc/fstab';

        # return if directory is already mounted
        for my $mountResult (@mounted) {
            my ($mount, $dir) = (split(" ", $mountResult))[0,2]; 
            return if($dir =~ m/^$ramdiskDir$/);
        }

        my $user = "svc" . $me->service();
        my $useLocalExpectCover = 1;
        my $master = ariba::rc::Passwords::lookup('master');
        my $password = ariba::rc::Passwords::lookup("$user");
        my $output;

        my @cmds;

        ## If the entry is already in te fstab, don't add it again:
        open my $IN, '<', $fstab or die "Error opening '$fstab' for reading: $!\n";
        my @fstab = <$IN>; ## Slurp the entire file, should be relatively small ...
        close $IN or die "Error closing '$fstab' for reading: $!\n";

        if ( !grep /^ramdisk\s+$ramdiskDir/, @fstab ) {
            push(@cmds, "sudo sh -c 'echo $fstabEntry >> $fstab'");
        }

        push(@cmds, ("sudo mkdir -p $ramdiskDir", "sudo mount $ramdiskDir", "sudo chown $user.ariba $ramdiskDir"));

        foreach my $cmd ( @cmds ){
            my $ret = executeLocalCommand($cmd, 0, $output, $master, $useLocalExpectCover, undef, $password);
        }
    }
}

# Call Direct action via arches front door
# Print message if refreshBundle was successful or not
#
sub refreshBundle {
    my $service = shift;
    my $adapter = shift;

    my @aProducts = ariba::rc::Globals::archesProducts();

  my $hasArches = 0;
  foreach my $ap ( @aProducts ) {
    #return unless (ariba::rc::InstalledProduct->isInstalled('arches', $service));
    next unless (ariba::rc::InstalledProduct->isInstalled($ap, $service));
    $hasArches = 1;
    my $arches = ariba::rc::InstalledProduct->new($ap, $service);
    my $url = $arches->default('VendedUrls.FrontDoorTopLevel');
    my $refreshBundleDA = $url . "/Arches/api/refreshBundle/$adapter";

    my $refreshBundleUrl = ariba::Ops::Url->new($refreshBundleDA);
    $refreshBundleUrl->setTimeout(60);
    $refreshBundleUrl->setUseOutOfBandErrors(1);
    my $results = $refreshBundleUrl->request();

    print "\nInforming " . $arches->name() . " about the publish bundle refresh: ";

    if ( my $errorString = $refreshBundleUrl->error() ) {
        print "Failed\n";
        print "WARN: could not refresh bundle.  This is non-blocking\n";
        print "You may need to manually refresh the bundle via $refreshBundleDA\n";
        print "--- Start Error ---\n$errorString\n---- End Error ----\n";
    } else {
        my ( $value ) = $results =~ m|<response>(.*)</response>|;
        if ($value eq "OK") {
            print "Success\n";
        } else {
            print "Failed\n";
            print "Success string 'OK' not found in returned XML\n";
            print "You may need to manually refresh the bundle via $refreshBundleDA\n";
            print "--- Start XML ---\n$results\n---- End XML ----\n";
        }
    }

  }
    return 1 if $hasArches;
    return;
}
#
# refreshBundle() example of output of DA to refresh bundle
# ie. DEV8 service: http://svcdev8ows.ariba.com/Arches/api/refreshBundle/ariba.catalog
#<requestResponse>
#  <jobId>ariba.catalog</jobId>
#  <response>OK</response>
#</requestResponse>
#

1;

__END__
